head     1.1;
branch   1.1.1;
access   ;
symbols  r1:1.1.1.1 mhelal:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2008.05.06.02.40.53;  author mhelal;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2008.05.06.02.40.53;  author mhelal;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
/***************************************************************
* Author: Manal Helal						*
* Last Modification Date: Fri 12 Jan 2007 03:39:51 AM EST       *
* Project : MMSA - Multiple Sequence Alignment Based on 	*
* 	Mathematics of Arrays - PhD Experimentation		*
* File: varparts.c, contain the variable	      		* 
* partitioning & scheduling functions                          	*
* Function:
*	calcWaves
*     getPartitionsNum
*     getWavePartsTotal
*     getPIndicesinWave
*     getNextPIndex
*     addPartitionIndex
*     notPreviouslyVisited
*     getProcID
*     getPartition
*     getNextPartition
*     IsCellInPart
***************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <string.h>
#include "globals.h"
#include "moaDst.h"
#include "utils.h"
#include "moa.h"
#include "main.h"
#include <pthread.h>

/* ======================================================================
	function calcWaves:
	Input:
		dimn: dimension of array
		shape: array of lengths of each dimension.
		partSize: size of partition.
	Output:
		myPartsCount: number of partitions.
		myCurrWave: current wave to be processed.
		myCurrPart: current partition to be processed.
======================================================================= */
long calcWaves (long dimn, long * shape, long partSize, long * myPartsCount, long * myCurrWave, long * myCurrPart) {
	long i, partsTotal, duplicatesTotal, waveNo, calcParts, elements_ub;
	int firstPartFound = 0, which_proc;
	char msg[SHORT_MESSAGE_SIZE];
	int dbglevel = 1;
	
	/* compute total partitions and duplicates */
	getPartitionsNum(dimn, shape, partSize, &partsTotal, &duplicatesTotal);
	/* Get Number of elements in MOA structure (Tau/moa.c)*/
	elements_ub = Tau(shape, dimn);
	/* print debug information (debug level 1) =================*/
#ifndef NDEBUG
	sprintf (msg, ">>>>Partitions Total is %ld\n>>>>Duplicates Total is %ld\n>>>>Total elements is %ld\n", partsTotal, duplicatesTotal, elements_ub);
	mprintf (dbglevel, msg, 1);
#endif
	/* free space of partitions in wave ============================*/
	if (partsInWave != NULL) {
		if (partsInWaveIndices != NULL) {
			for (i=0;i<wavesTotal;i++) {
				if (partsInWaveIndices[i] != NULL)
					free (partsInWaveIndices[i]);
			}
		}
		free (partsInWaveIndices);
		partsInWaveIndices = NULL;
		free (partsInWave);
		partsInWave = NULL;
	}
	
	calcParts = waveNo = wavesTotal = 0;
	partsInWave = mmalloc (sizeof *partsInWave);
	partsInWaveIndices  = mmalloc (sizeof *partsInWaveIndices);
	(*myPartsCount) = 0;
	while (calcParts < partsTotal) {
#ifndef NDEBUG
		sprintf(msg, "[%d]>calcWaves: loop parts [%ld] of [%ld]: Total Partitions: %ld\n", myProcid, calcParts, partsTotal, (*myPartsCount));	
		mprintf(dbglevel+1, msg, 1);
#endif
		partsInWave = realloc (partsInWave, (waveNo+1) * sizeof *partsInWave);
		partsInWaveIndices  = realloc (partsInWaveIndices, (waveNo+1) * sizeof *partsInWaveIndices);
		partsInWave[waveNo] = getWavePartsTotal ((waveNo+1), dimn);
		partsInWave[waveNo] = getPIndicesinWave(partsInWave, dimn, shape, waveNo, partSize, &partsInWaveIndices);
		calcParts += partsInWave[waveNo];
	  	for (i=0;i<partsInWave[waveNo];i++) {
	  		which_proc = getProcID (waveNo, i);
#ifndef NDEBUG
			sprintf(msg, "[%d]>calcWaves: wave [%ld]- partition [%ld] - Process %d\n", myProcid, waveNo, i, which_proc);	
			mprintf(dbglevel+2, msg, 1);
#endif
	  		if (which_proc == myProcid) {
	  			(*myPartsCount)  ++;
	  			if (firstPartFound == 0)  {
	  				(*myCurrPart) = i;
	  				(*myCurrWave) = waveNo;
	  				firstPartFound = 1;
	  			}
	  		}
	  	}
		waveNo++;
	}
	wavesTotal = waveNo;
#ifndef NDEBUG
	/* debug output =========================================================*/
 	sprintf (msg, ">>>>Total %ld Parts in  %ld Waves\n", calcParts, waveNo);
	mprintf (dbglevel, msg, 1);
  	for (waveNo=0;waveNo<wavesTotal;waveNo++) {
		sprintf (msg, ">>>>Total partitions in wave number [%ld] is  %ld partitions\n", waveNo, partsInWave[waveNo]);
		mprintf (dbglevel+1, msg, 1);
		mprintf (dbglevel+2, ">>>>Partition Indexes{\n", 1);
	  	for (i=0;i<partsInWave[waveNo];i++) {
			sprintf (msg, "%ld ", partsInWaveIndices[waveNo][i]);
			mprintf (dbglevel+2, msg, 1);
		}
		mprintf (dbglevel+2, "\n}\n", 1);
	}
	sprintf(msg, "[%d]>calcWaves: Current Wave: %ld - Current Partition: %ld - Total Partitions: %ld\n", myProcid, (*myCurrWave), (*myCurrPart), (*myPartsCount));	
	mprintf(dbglevel, msg, 1);
	/* ================================ end debug output ==============*/
#endif
	
 	return wavesTotal;
}

/* ***************************************************************
*  function name:  getPartitionsNum
*  Description:    Calculated Total Number of Partitions & duplicates
*  Input:
*		dimn: dimension of array
*		shape: array of lengths of each dimension.
*		pSize: size of partition.
*  Output:
*		pTotal: Total number of partitions.
*		dTotal: Total number of duplicates
 ***************************************************************/

long * getMPSize (long dimn, long * index, long * shape, long pStart, long pOptimal, long pStride) {
	long * MpSize, i;
	MpSize = mmalloc (dimn * sizeof *MpSize);
	
	for (i=0;i<dimn;i++) {
		MpSize[i] = getPSize (index[i], shape[i], pStart, pOptimal, pStride);
	}
	return MpSize;	
}

long getPSize (long index, long length, long pStart, long pOptimal, long pStride) {
	long pSize, j;
	int found;
	found = 0
	pSize = pStart; /* might always be 3*/
	j = 0;
	while ((j < length) && (found ==0)) {
		j = j + pSize - 2;
		
		if (j >= index)
			found = 1;
		else {
			
			if ((j < (length / 2)) && (pSize < pOptimal))
				pSize = pSize + pStride; /* increase the pSize till the optimal or the middle of the dimension */
			else (j > (length / 2))
				pSize = pSize - pStride; /* otherwise start reducing it */
			/*otherwise, keep it as is, if optimal and already in the middle*/
		}
	}
	return pSize;
}

long getOptimalPSize (long * startPSize, long * pStride) {
	(*startPSize) = 3;
	(*pStride) = 2;
	return 7;
}

int getPartitionsNum(long dimn, long * shape, long pSize, long * pTotal, long * dTotal) {
	long i, j, PrevOC, startPSize, startPSize, OptimalPSize;
	long * partInDim = NULL, * dupInDim = NULL;

	partInDim = mmalloc (dimn * sizeof *partInDim);
	if (partInDim == NULL)
		return -1;
	dupInDim = mmalloc (dimn * sizeof *dupInDim);
	if (dupInDim == NULL)
		return -1;
	OptimalPSize = getOptimalPSize (&startPSize, &pStride);
	(*pTotal) = 1;
	(*dTotal) = 0;
	for (i = 0; i < dimn; i++) {
		/* to accomodate for variable partition size, this equation need to be in a loop where the staing partition size is the same from both ends of the shape of the current dimension, then increase till the optimal towards the middle of the shape of the dimension*/
		j = 0;
		pSize = startPSize; /* might always be 3*/
		partInDim[i] = 0;
		while (j < shape[i]) {
			j = j + pSize - 2;
			partInDim[i] ++;
			
			if ((j < (shape[i] / 2)) && (pSize < OptimalPSize))
				pSize = pSize + pStride; /*should be calculated as */
			else (j > (shape[i] / 2))
				pSize = pSize - pStride; /*should be calculated as */

		}
		//partInDim[i] = ceil((double) (shape[i] - 1) / (pSize - 1));
		(*pTotal) *= partInDim[i];	
		PrevOC = 1;
		for (j = 0; j < i; j++) {
			PrevOC *= partInDim[j] - 1;
		}
		if (i==0)
			dupInDim[0]=partInDim[0] - 1;
		else
			dupInDim[i] = dupInDim[i-1] * shape[i] + PrevOC * pow(2, i-1);
		(*dTotal) += dupInDim[i];
	}     
	if (partInDim != NULL)
		free (partInDim);
	if (dupInDim != NULL)
		free (dupInDim);
	return 0;
}

/**************************************************************
	Function: getWavePartsTotal
	Description:
		Compute total number of partion in wave (WaveNo) for Dimension (dimn)
	Reurns: Number of partition in the specified wave 
**************************************************************/
long getWavePartsTotal (long WaveNo, long dimn) {
  long i, WaveParts;

	WaveParts = 0;
	if ((WaveNo < 1) || (dimn < 2))
		WaveParts = -1;
	else if (WaveNo == 1)
		WaveParts = 1;
	else if (dimn == 2)
		WaveParts = WaveNo;
	else {
		for (i=0;i<WaveNo;i++) {
			WaveParts += getWavePartsTotal(WaveNo-i, dimn-1);
		}
	}
	return WaveParts;
}

/***************************************************************************
	Function: getPIndicesinWave
	Description:
		Get partition indices in a wave (waveNo)
	Input
		AllpartsInWave: array contains number of partitions in each wave.
		dimn: dimension of MOA array.
		shape: array of lengths of each dimension.
		waveNo: Wave Number to compute its partition indices.
		partSize: Partition Size.
	Output:
		partsInWaveIndices: Array of partition indices of the specied wave
	Reurn: -1 incase of error.
***************************************************************************/
long getPIndicesinWave (long * AllpartsInWave, long dimn, long * shape, long waveNo, long partSize, long * * * partsInWaveIndices) {
	long partsInWave, i, j, * dist, * dist_orig;
	int more = 0, pmore = 0;
	char msg[SHORT_MESSAGE_SIZE];
	int dbglevel = 2;

	partsInWave = AllpartsInWave[waveNo];
	if (partsInWave<=0)
		return -1;
	
	dist = calloc (dimn, sizeof *dist);
	dist_orig = calloc (dimn, sizeof *dist_orig);
	i = 0;
	(*partsInWaveIndices)[waveNo] = mmalloc (sizeof *((*partsInWaveIndices)[waveNo]));
	do  {
		getNextPIndex (&more, dimn, dimn, waveNo, &dist);
		addPartitionIndex (&i, dist, AllpartsInWave, dimn, shape, waveNo, partSize, partsInWaveIndices);
		for (j=0;j<dimn;j++) {
			dist_orig[j] = dist[j];
		}
		/*asort (dimn, dist);*/
		pmore = 1;
		while (pmore ==1) {
			permute(dimn, dist, &pmore);
			/*if (pmore == 1 ) { */
			addPartitionIndex (&i, dist, AllpartsInWave, dimn, shape, waveNo, partSize, partsInWaveIndices);
			/*}*/
		}
		for (j=0;j<dimn;j++) {
			dist[j] = dist_orig[j];
		}
	} while (more == 1);
	free (dist);
	free (dist_orig);
#ifndef NDEBUG
	sprintf (msg, ">>>>Actual Partitions in Wave %ld is %ld\n", waveNo, i);
	mprintf (dbglevel, msg, 1);
#endif
	return i;
}

/******************************************************************************
	Function: getNextPIndex
	Description:
		recursive function to compute Partition Indexes of a wave.
	Input/output:
		more: to inicate first call and next calls.
	Input:
		dimn: dimension of MOA array. originally equal act_dimn and recursively decreased by 1.
		act_dimn: actual dimension of MOA array.
		waveNo: Wave Number
	Output:
		PIndex: Array of partition Indices.
******************************************************************************/
void getNextPIndex(int * more, long dimn, long act_dimn, long waveNo, long * * PIndex) {
	long startDist, i;
	char msg[SHORT_MESSAGE_SIZE];

	/* Method 2: Change the kth index in each k dimension, to result in asending order index to avoid sorting later
	 get starting Distance from origin, if called to the first time, get the middle point of the current wave Number divided by the dimension, else, it is the last point assigned to the first dimension, to continue from there*/
	if ((*more) == 0) {  /* first call ===========================*/
		if (waveNo > 0)
			startDist = ceil((double) waveNo/act_dimn);
		else
			startDist = 0;
		(*PIndex)[dimn-1] = startDist;
		for (i=dimn-2;i>=0;i--) 
			(*PIndex)[i] = 0;
	}
	else  /* next calls ===========================================*/
		startDist = (*PIndex)[dimn-1];
		
#ifndef NDEBUG
	sprintf (msg, "in d %ld, %ld, %ld w %ld d %ld s%ld m %d\n", (*PIndex)[0], (*PIndex)[1], (*PIndex)[2], waveNo, dimn, startDist, (*more));
	mprintf (10, msg, 1);
#endif
	/* All Terminal Cases first, then the 2D terminal cases, then the rest N-D cases
	 test for wave 0 for all dimensions is the same, all zeros*/
	if (waveNo == 0) {
#ifndef NDEBUG
		mprintf (10, " 000 ", 1);
#endif
		for (i=0;i<act_dimn;i++) 
			(*PIndex)[i] = 0;
		(*more) = 0;
	}
	else if	((*PIndex)[dimn-1] == waveNo) {
	/* test for last case where the starting Distance is already equal the wave number, and the rest of dimensions' indices are zeros*/
#ifndef NDEBUG
		mprintf (10, " 111 ", 1);
#endif
		for (i=dimn-2;i>=0;i--) 
			(*PIndex)[i] = 0;
		(*more) = 0;
	}
	else if (( (*PIndex)[dimn-1] * dimn == waveNo) && ((*PIndex)[dimn-1] != (*PIndex)[dimn-2])) {
	/* All Equal Indices, starting middle point	  */
#ifndef NDEBUG
		mprintf (10, " 222 ", 1);
#endif
		for (i=dimn-2;i>=0;i--) 
			(*PIndex)[i] = (*PIndex)[dimn-1];
		(*more) = 1;
	}
	else if (dimn == 2) { 
	/* Cases for 2D*/
		if (((*PIndex)[dimn-2] != waveNo - startDist)) {
		/* Firs Case, where first dimension = starting middle Distance, and second dimension is not yet assigned,*/
#ifndef NDEBUG
			mprintf (10, " 333 ", 1);
#endif
			(*PIndex)[dimn-2] = waveNo - startDist;
			(*more) = 1;
		}
		else if (startDist+1<waveNo) {
		/* Increase one and decrease the other*/
#ifndef NDEBUG
			mprintf (10, " 444 ", 1);
#endif
			startDist++;
			(*PIndex)[dimn-1] = startDist;
			(*PIndex)[dimn-2] = waveNo - startDist;
			(*more) = 1;
		} 
		else if (startDist+1==waveNo) {
		/* no more and return, we should never reach this case, since it is covered in case 111*/
#ifndef NDEBUG
			mprintf (10, " 555 ", 1);
#endif
			(*PIndex)[dimn-1] = waveNo;
			(*PIndex)[dimn-2] = 0;
			(*more) = 0;
 		}
	}
	else {
	/* more the 2D*/
		if  ((( (*PIndex)[dimn-1] * dimn == waveNo) && ((*PIndex)[dimn-1] == (*PIndex)[dimn-2])) || 
		(((*PIndex)[dimn-1] + (*PIndex)[dimn-2] == waveNo) && ((*PIndex)[dimn-1]+1<waveNo)))  {
		/* next case after all are equal
		 First and second dimension are equal waveNo, i.e. all permutations are finished for the previous first dimension,  then increase the first dimension,*/
#ifndef NDEBUG
			mprintf (10, " 666  ", 1);
#endif
			startDist++;
			(*PIndex)[dimn-1] = startDist;
			for (i=dimn-2;i>=0;i--) 
				(*PIndex)[i] = 0;
			if (waveNo - startDist != 0) {
				(*more) = 0;
				getNextPIndex (more, dimn-1, act_dimn, waveNo - startDist, PIndex);
				(*more) = 1;
			}
			else
				(*more) = 0;
		}
		else if ((*PIndex)[dimn-1] + (*PIndex)[dimn-2] != waveNo) {
		/* First and second dimension are not yet equal waveNo, i.e. there more permutations for the current first dimension value*/
#ifndef NDEBUG
			mprintf (10, " 777 ", 1);
#endif
			(*PIndex)[dimn-1] = startDist;
			getNextPIndex (more, dimn-1, act_dimn, waveNo - startDist, PIndex);
			(*more) = 1;
		}	
		else if ((*PIndex)[dimn-1]+1==waveNo) {
		/* last case, where the final increase will be the waveNo, and the rest need to be zeros			mprintf (10, " 888 ", 1);*/
			(*PIndex)[dimn-1] = waveNo;
			for (i=dimn-2;i>=0;i--) 
				(*PIndex)[i] = 0;
			(*more) = 0;
		} 
	}
#ifndef NDEBUG
	sprintf (msg, "out d %ld, %ld, %ld w %ld d %ld s%ld m %d\n", (*PIndex)[0], (*PIndex)[1], (*PIndex)[2], waveNo, dimn, startDist, (*more));
	mprintf (10, msg, 1);
#endif
}

/*********************************************************************************
	Function: addPartitionIndex
	Description:
	Input:
		dimn: dimension of MOA array.
		waveNo: Wave Number
		partSize: Partition Size
	Output:
	
*********************************************************************************/
int addPartitionIndex (long * PartOrder, long * dist, long * AllpartsInWave, long dimn, long * shape, long waveNo, long partSize, long * * * partsInWaveIndices) {
	int validIndex;
	long flatIndex, j, * ind;

	ind = calloc (dimn, sizeof *ind);
	validIndex = 1;
	for (j=0;j<dimn;j++) {
    	ind[j] = dist[j] * (partSize-1);
    	/* It is invalid if it is more than the shape (lengths of sequences), or if it ia the last one, this means that it is only the overlapping cells, with nothing internal to compute on its own, which would be redundancy*/
    	if (ind[j] >= (shape[j]-1))
    		validIndex = 0;
	}
  	flatIndex = Gamma(ind, dimn, shape,  dimn, 1);
  	if ((notPreviouslyVisited(AllpartsInWave, (*PartOrder), (*partsInWaveIndices), waveNo, flatIndex) == 0)  && (validIndex == 1) ) {
		(*partsInWaveIndices)[waveNo] = realloc ((*partsInWaveIndices)[waveNo], ((*PartOrder)+1) * sizeof *((*partsInWaveIndices)[waveNo]));
		(*partsInWaveIndices)[waveNo][(*PartOrder)] = flatIndex;
		(*PartOrder)++;  		
	}
	free (ind);
	return 0;
}

/********************************************************************
	Function: notPreviouslyVisited
********************************************************************/
int notPreviouslyVisited (long * partsInWave, long partsinCurrentWave, long * *  partsInWaveIndices, long waveNo, long flatIndex) {
	long i, j, k;
	int found = 0;
	/* Check if it is not a valid Index as well*/
	if (flatIndex < 0)
		return  1;
	for (j=0;(j<=waveNo) && (found == 0); j++) {
		if (j==waveNo)
			k = partsinCurrentWave;
		else
			k = partsInWave[j];
		for (i=0;(i<k) && (found == 0); i++) {
			if (partsInWaveIndices[j][i]  == 	flatIndex)
				found =1;
		}
	}
	return found;
}
/************************************************************
	Function: getProcID
	Description:
		Retutns Process ID (task) that process Wave (waveNo) 
		and Partition (PartOrder)
***********************************************************/
int getProcID (long waveNo, long PartOrder) {
	ldiv_t partsInCluster, procValue;
	long divRem;
	int procID = -1;
	/*printf (" w %ld o %ld ap %ld ", waveNo, PartOrder, partsInWave[waveNo]);*/
	if (partsInWave != NULL) {
		if (PartOrder == 0)
			procID = 0;
		else if (PartOrder < partsInWave[waveNo]) {
			partsInCluster = ldiv(partsInWave[waveNo], ClusterSize);
			if (partsInCluster.quot > 0) {				
				/*divRem = partsInCluster.quot + ceil ((float) partsInCluster.rem / ClusterSize);*/
				divRem = partsInCluster.quot;
				procValue = ldiv(PartOrder, divRem);
				procID = procValue.quot;
				if (procID >= ClusterSize)
					procID = ClusterSize - 1;
				/*printf (" Total in Wave %ld = %ld in ClusterSize %d, PartsPerProc in Wave %ld, Processor ID %ld \n", waveNo, partsInWave[waveNo], ClusterSize, partsInCluster.quot, procValue.quot);*/
			}
			else
				procID = 0;			
		}
	}
	return procID;
}


/*********************************************************************************
	Function: getPartition
		Construct Partition MOA record
	Input:
		flatIndex:
		dimn: dimension of MOA array.
		shape: array of lengths of each dimention.
		waveNo: Wave Number to compute its partition indices.
		partSize: Partition Size.
	Output:
		part: MOA Partition record.
*********************************************************************************/
int getPartition (long flatIndex, long dimn, long * shape, MOA_rec * * part, long partSize) {
	long i, j, * startInd = NULL, * endInd = NULL;
	
	/* get start index =======================*/
	Gamma_Inverse(flatIndex, shape, dimn, &startInd, 1);
	/* contruct MOA record ====================*/
	createMOAStruct(part);
	(*part)->dimn = dimn;
	(*part)->shape = mcalloc (dimn, sizeof *(*part)->shape);
	endInd = mcalloc (dimn, sizeof *endInd);
	for (i=0;i<dimn;i++) {
		endInd[i] = startInd[i]+ partSize -1;
		if (endInd[i] >= shape[i]) 
			endInd[i] = shape[i] - 1;		
		(*part)->shape[i] = endInd[i] - startInd[i] + 1;
	}
	(*part)->elements_ub = Tau((*part)->shape, (*part)->dimn);
	(*part)->elements = mcalloc ((*part)->elements_ub, sizeof *(*part)->elements);
	(*part)->indexes = mcalloc ((*part)->elements_ub, sizeof *(*part)->indexes);
	for (i=0;i<(*part)->elements_ub;i++) {
		(*part)->elements[i].prev_ub = 0;
		(*part)->elements[i].prev = NULL;
		if (endInd != NULL) {
			free (endInd);
			endInd = NULL;
		}
		Gamma_Inverse(i, (*part)->shape, (*part)->dimn, &endInd, 1);
		for (j=0;j<dimn;j++) 
			endInd[j] = endInd[j] + startInd[j]; /* add the starting offset to get the Global Index*/
		(*part)->indexes[i] = Gamma(endInd, dimn, shape,  dimn, 1);
	}	
	if (startInd != NULL)
		free (startInd);
	if (endInd != NULL)
		free (endInd);
	return 0;
}

/***************************************************************************
	Function: getNextPartition
	Input/Output:
		waveNo: Identify Current Wave and contains next partition wave
		PartOrder: Identify current partition and returns with next partition
***************************************************************************/
void getNextPartition (long * waveNo, long * PartOrder) {
	ldiv_t partsInCluster;
	int valid = 1;
	(*PartOrder) ++;
	if ((*PartOrder) > partsInWave[(*waveNo)]) {
		valid = 0;
	}
	else if (getProcID((*waveNo), (*PartOrder)) != myProcid) {
		valid = 0;
	}

	if	(valid == 0) {
		(*waveNo) ++;
		if ((*waveNo) >= wavesTotal)
			(*PartOrder) = -1;
		else {
			partsInCluster = ldiv(partsInWave[(*waveNo)], ClusterSize);
			(*PartOrder) = partsInCluster.quot * myProcid;
		}
	}
}

/* ***************************************************************
 ***********   Given a CellIndex, returns its PartIndex based in  ******
 ************           PartitionsSize and Global Dimensions      ********
 ***************************************************************/

int IsCellInPart (long cellIndex, long partIndex, long dimn, long * shape, long partSize) {
	long i, * cellMIndex = NULL, * partMIndex = NULL;

	Gamma_Inverse(cellIndex, shape,  dimn, &cellMIndex, 2);
	Gamma_Inverse(partIndex, shape,  dimn, &partMIndex, 2);
	for (i=0;i<dimn;i++) {
		if ((cellMIndex[i] < partMIndex[i]) || (cellMIndex[i] > partMIndex[i] + partSize - 1)) {
			if (cellMIndex != NULL)
				free (cellMIndex);
			if (partMIndex != NULL)
				free (partMIndex);
			return 0;
		}
	}
	if (cellMIndex != NULL)
		free (cellMIndex);
	if (partMIndex != NULL)
		free (partMIndex);
	return 1;
}
@


1.1.1.1
log
@Distributed Optimal MSA using MoA
@
text
@@
