head     1.1;
branch   1.1.1;
access   ;
symbols  r1:1.1.1.1 mhelal:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2008.05.06.02.40.53;  author mhelal;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2008.05.06.02.40.53;  author mhelal;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/******************************************************************************
* FILE: perm.c
* DESCRIPTION:  
* AUTHOR: Manal E. Helal
* LAST REVISED:
* Function:
*		dsort
*		asort
*     permute
******************************************************************************/
#include <stdio.h>
#include "utils.h"

//****************************************************************************80

void dsort( long n, long a[] )

//****************************************************************************80
//
//  Purpose:
//
//    dsortreorders an I4VEC into a descending heap.
//
//  Discussion:
//
//    A heap is an array A with the property that, for every index J,
//    A[J] >= A[2*J+1] and A[J] >= A[2*J+2], (as long as the indices
//    2*J+1 and 2*J+2 are legal).
//
/*  Diagram:

                  A(0)
                /      \
            A(1)         A(2)
          /     \        /  \
      A(3)       A(4)  A(5) A(6)
      /  \       /   \
    A(7) A(8)  A(9) A(10)
*/
//  Modified:
//
//    30 April 1999
//
//  Author:
//
//    John Burkardt
//
//  Reference:
//
//    Albert Nijenhuis, Herbert Wilf,
//    Combinatorial Algorithms,
//    Academic Press, 1978, second edition,
//    ISBN 0-12-519260-6.
//
//  Parameters:
//
//    Input, int N, the size of the input array.
//
//    Input/output, int A[N].
//    On input, an unsorted array.
//    On output, the array has been reordered into a heap.
//
{
  long i, ifree, key, m;
//
//  Only nodes (N/2)-1 down to 0 can be "parent" nodes.
//
  for ( i = (n/2)-1; 0 <= i; i-- )
  { 
//
//  Copy the value out of the parent node.
//  Position IFREE is now "open".
//
    key = a[i];
    ifree = i;

    for ( ; ; )
    {
//
//  Positions 2*IFREE + 1 and 2*IFREE + 2 are the descendants of position
//  IFREE.  (One or both may not exist because they equal or exceed N.)
//
      m = 2 * ifree + 1;
//
//  Does the first position exist?
//
      if ( n <= m )
      {
        break;
      }
      else
      {
//
//  Does the second position exist?
//
        if ( m + 1 < n )
        {
//
//  If both positions exist, take the larger of the two values,
//  and update M if necessary.
//
          if ( a[m] < a[m+1] )
          {
            m = m + 1;
          }
        }
//
//  If the large descendant is larger than KEY, move it up,
//  and update IFREE, the location of the free position, and
//  consider the descendants of THIS position.
//
        if ( key < a[m] )
        {
          a[ifree] = a[m];
          ifree = m;
        }
        else
        {
          break;
        }
      }
    }
//
//  When you have stopped shifting items up, return the item you
//  pulled out back to the heap.
//
    a[ifree] = key;
  }

  return;
}

//****************************************************************************80

void asort( long n, long a[] )

//****************************************************************************80
//
//  Purpose:
//
//    asortascending sorts an I4VEC using heap sort.
//
//  Modified:
//
//    30 April 1999
//
//  Author:
//
//    John Burkardt
//
//  Reference:
//
//    Albert Nijenhuis, Herbert Wilf,
//    Combinatorial Algorithms,
//    Academic Press, 1978, second edition,
//    ISBN 0-12-519260-6.
//
//  Parameters:
//
//    Input, int N, the number of entries in the array.
//
//    Input/output, int A[N].
//    On input, the array to be sorted;
//    On output, the array has been sorted.
//
{
  long n1, temp;

  if ( n <= 1 )
  {
    return;
  }
//
//  1: Put A into descending heap form.
//
  dsort( n, a );
//
//  2: Sort A.
//
//  The largest object in the heap is in A[0].
//  Move it to position A[N-1].
//
  temp = a[0];
  a[0] = a[n-1];
  a[n-1] = temp;
//
//  Consider the diminished heap of size N1.
//
  for ( n1 = n-1; 2 <= n1; n1-- )
  {
//
//  Restore the heap structure of the initial N1 entries of A.
//
    dsort( n1, a );
//
//  Take the largest object from A[0] and move it to A[N1-1].
//
    temp = a[0];
    a[0] = a[n1-1];
    a[n1-1] = temp;
  }

  return;
}

//****************************************************************************80

void permute ( long n, long a[], int *more )

//****************************************************************************80
//
//  Purpose:
//
//    permute returns the next multipermutation.
//
//  Discussion:
//
//    To begin the computation, the user must set up the first multipermutation.
//    To compute ALL possible multipermutations, this first permutation should
//    list the values in ascending order.
//
//    The routine will compute, one by one, the next multipermutation,
//    in lexicographical order.  On the call after computing the last 
//    multipermutation, the routine will return MORE = 0 (and will
//    reset the multipermutation to the FIRST one again.)
//
//  Modified:
//
//    07 March 2007
//
//  Author:
//
//    John Burkardt
//
//  Parameters:
//
//    Input, int N, the number of items in the multipermutation.
//
//    Input/output, int A[N]; on input, the current multipermutation.
//    On output, the next multipermutation.
//
//    Output, int *MORE, is 1 if the next multipermutation
//    was computed, or 0 if no further multipermutations could
//    be computed.
//
{
  long i, m, temp;
//
//  Step 1:
//  Find M, the last location in A for which A(M) < A(M+1).
//
  m = 0;
  for ( i = 1; i <= n-1; i++ )
  {
    if ( a[i-1] < a[i] )
    {
      m = i;
    }
  }
//
//  Step 2:
//  If no M was found, we've run out of multipermutations.
//
  if ( m == 0 )
  {
    *more = 0;
    asort( n, a );
    return;
  }
  else
  {
    *more = 1;
  }
//
//  Step 3:
//  Ascending sort A(M+1:N).
//
  if ( m + 1 < n )
  {
    asort( n-m, a+m );
  }
//
//  Step 4:
//  Locate the first larger value after A(M).
//
  i = 1;
  for ( ; ; )
  {
    if ( a[m-1] < a[m+i-1] )
    {
      break;
    }
    i = i + 1;
  }
//
//  Step 5:
//  Interchange A(M) and the next larger value.
//
  temp = a[m-1];
  a[m-1] = a[m+i-1];
  a[m+i-1] = temp;

  return;
}
/*
int main()
{
// = {2, 3, 6, 9};	
int * iarray;
int i, n = 4;
int  more = 1;
iarray = malloc (n * sizeof *iarray);

iarray[0] = 2;
iarray[1] = 3;
iarray[2] = 6;
iarray[3] = 9;



    for ( i = 0; i < n; i++ )
    	printf (" %d ", iarray[i]);
    printf ("\n");
  while ( more ==1 )
  {
    permute( n, iarray, &more);
    for ( i = 0; i < n; i++ )
    	printf (" %d ", iarray[i]);
    printf ("\n");
   }
   free (iarray);
      return 0;
    }
    */
@


1.1.1.1
log
@Distributed Optimal MSA using MoA
@
text
@@
