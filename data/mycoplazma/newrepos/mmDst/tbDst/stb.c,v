head	1.2;
access;
symbols
	r1:1.1.1.1 mhelal:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.05.11.13.55.55;	author mhelal;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.02.40.53;	author mhelal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.05.06.02.40.53;	author mhelal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@search space error
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mpi.h>
#include "../main.h"
#include "../globals.h"
#include "../moa.h"
#include "../utils.h"
#include "../moaDst.h"

int myProcid, ClusterSize;
MPI_Comm MOAMSA_COMM_WORLD;


long getPartIndex (void * arg, long globalIndex, long * localCellIndex, long startPart) {
	long i, j;
	char msg[MID_MESSAGE_SIZE];
	ProcessData * pData;
	pData = (ProcessData *) arg;
	(*localCellIndex) = -1;
	
	if (startPart < 0)
		return -1;
	for (i=startPart;i<pData->partitionsCount;i++) {
		for (j=0;j<pData->MOAPart[i].msaAlgn->elements_ub;j++) {
			if (globalIndex == pData->MOAPart[i].msaAlgn->indexes[j]) {
				(*localCellIndex) = j;
				sprintf (msg, " getPartIndex found startpart %ld globalIndex %ld localIndex %ld\n", startPart, globalIndex, (*localCellIndex));
				mprintf(3, msg, 1);
				return i;
			}
		}		
	}	
	sprintf (msg, " getPartIndex NOT found startpart %ld globalIndex\n", startPart, globalIndex);
	mprintf(3, msg, 1);
	return -1;
}

/* Search all local partitions to return the maximum local index that contains the given global cellIndex*/
long getTraceBackPartition (void * arg, long globalIndex, long * localCellIndex, long partIndex) {
	long minpartIndex, minlocalCellIndex, locCellIndex;
	char msg[MID_MESSAGE_SIZE];
	ProcessData * pData;
	pData = (ProcessData *) arg;
	partIndex = getPartIndex (pData, globalIndex, &locCellIndex, partIndex);
 	minlocalCellIndex = locCellIndex;
	minpartIndex = partIndex;
	sprintf(msg, "in getTraceBackPartition locCellIndex %ld partIndex %ld\n", locCellIndex, partIndex);  
	mprintf(20, msg, 1);
	while ((partIndex >= 0) && (partIndex < pData->partitionsCount-1)) {
		partIndex = getPartIndex (pData, globalIndex, &locCellIndex, partIndex + 1);
		sprintf(msg, "in getTraceBackPartition locCellIndex %ld partIndex %ld \n", locCellIndex, partIndex);  
		mprintf(20, msg, 1);
		
		if ((locCellIndex < minlocalCellIndex) && (partIndex != -1) && (partIndex < pData->partitionsCount-1)) {
			minlocalCellIndex = locCellIndex;
			minpartIndex = partIndex;
		}
	}
	(*localCellIndex) = minlocalCellIndex;
	return minpartIndex;
}

long getmaxCellScoreinLowerNeighbors (long * ind, MOA_rec * MOA_in) {
	MOA_rec * rslt;
	int ret;
	long i, maxCellIndex, maxCellScore;
  char msg[MID_MESSAGE_SIZE];

	mprintf(20, "in getmaxCellScoreinLowerNeighbors\n", 1);
	ret = MOAGetLowerNeighbors (ind, MOA_in, &rslt);
	if (ret < 0)
		return -1;
	sprintf(msg, "rslt->elements_ub %ld\n", rslt->elements_ub);  
	mprintf(20, "in getmaxCellScoreinLowerNeighbors\n", 1);
	maxCellScore = 	rslt->elements[0].val;
	maxCellIndex = 0;
	for (i=1;i<rslt->elements_ub;i++) {
		if (rslt->elements[i].val > maxCellScore) {
			maxCellScore = rslt->elements[i].val;
			maxCellIndex = i;
		}
	}
	return maxCellIndex;
}

int checkPrevInLocalPartitions (void * arg, long globalIndex, long * locCellIndex, long * partIndex) {
	long i, j, currPartIndex = (*partIndex);
  char msg[MID_MESSAGE_SIZE];

	ProcessData * pData;
	pData = (ProcessData *) arg;
	for (i=0;i<currPartIndex;i++) { 
		for (j=0;j<pData->MOAPart[i].msaAlgn->elements_ub;j++) {
			if ((globalIndex == pData->MOAPart[i].msaAlgn->indexes[j]) && (pData->MOAPart[i].msaAlgn->elements[j].prev_ub > 0)) {
				(*partIndex) = i;
				(*locCellIndex) = j;
				sprintf(msg, "Prev in local partition %ld localindex %ld\n", i, j);  
				mprintf(3, msg, 1);
				return 1;
			}
		}
	}
	mprintf (3, "Prev not in Local Parts\n", 1);
	return -1;
}
	/* check in Received Cells from Other Processors */
long checkPrevInRemotePartitions (long globalIndex, long * OCIwaveNo) {
	long i, j;
  char msg[MID_MESSAGE_SIZE];
	for (i=0;i<OCin_ub;i++) {
		for (j=0;j<OCin[i].wavesOC;j++) {
			if (globalIndex == OCin[i].WOCI[j].cellIndex) {
					sprintf(msg, "found remote partition in proc %d i %ld with global index %ld\n", OCin[i].WOCI[j].fromProc, i, OCin[i].WOCI[j].cellIndex);  
					mprintf(3, msg, 1);
					(*OCIwaveNo) = i;
					return j;
			}
		}
	}
	sprintf (msg, "not Found in Remote Partitions\n");
	mprintf(3, msg, 1);

	return -1;
}

long traceBack (void * arg, char * * sequences, char * * * algnseq, long * arg_globalIndex, int * nextProc, long * partIndex) {
	long tempCell, currentScore, globalIndex, currLocalIndex, i, j, aSeqLen = 0;
	long hLNCellIndex, prevScore, OCIwaveNo, OCIndex, prevCell = 0;
	long * old_index = NULL; /* multidimensional index*/
	long * new_index = NULL; /* multidimensional index of new cell*/
	long * seqPositions = NULL; /* Positions at each sequence where the next residue can be taken in the alignment*/
	char temp, msg[MID_MESSAGE_SIZE];
	int ret, movehappened;
	MOA_rec * msaAlgn = NULL;
	ProcessData * pData;

	pData = (ProcessData *) arg;

	aSeqLen = 0;
	(*nextProc) = -1;
	/* Get Max Cell on Last Border as Current Cell*/
	/*currentScore = getMaxOnLastBorder (msaAlgn, &currLocalIndex);*/
	//(*partIndex) = getTraceBackPartition (pData, (*arg_globalIndex), &currLocalIndex, (*partIndex));
	if ((Mode != Distributed) || (ClusterSize == 1)) {
		(*partIndex) = 0;
	}
	else {
		(*partIndex) = getPartIndex (pData, (*arg_globalIndex), &currLocalIndex, 0);
		if ((*partIndex) < 0)
			return -1;
	}
	msaAlgn = pData->MOAPart[(*partIndex)].msaAlgn;
	currentScore = msaAlgn->elements[currLocalIndex].val;
	globalIndex = msaAlgn->indexes[currLocalIndex];

	old_index = mcalloc ((msaAlgn->dimn), sizeof *(old_index));
	new_index = mcalloc ((msaAlgn->dimn), sizeof *(new_index));
	seqPositions = mcalloc ((msaAlgn->dimn), sizeof *(seqPositions));
	Gamma_Inverse(msaAlgn->indexes[currLocalIndex], pData->seqLen, pData->seqNum, &new_index, 2);
	printf ("Starting ");
	for (i=0;i<pData->seqNum;i++) {
		old_index[i] = new_index[i];
		seqPositions[i] = pData->seqLen[i] - 1;
		printf (" %ld ", seqPositions[i]);
	}
	printf ("\n");
	/* Iterate making the Neighbor Cell that Computed the Current Cell, the new current cell till the origin is reached*/
	mprintf (3, "globalIndex partOrder currLocalIndex score prev_ub prev[0] prevcell prevscore\n", 1);

	while (currLocalIndex > 0) {
		prevScore = currentScore; 
		prevCell = currLocalIndex; 

		if (msaAlgn->elements[currLocalIndex].prev_ub > 0)
			sprintf (msg, "%ld %ld %ld %ld %ld %ld %d %ld\n", globalIndex, (*partIndex), currLocalIndex, currentScore, msaAlgn->elements[currLocalIndex].prev_ub, msaAlgn->elements[currLocalIndex].prev[0], prevCell, prevScore);
		else
			sprintf (msg, "%ld %ld %ld %ld %ld null %d %ld\n", globalIndex, (*partIndex), currLocalIndex, currentScore, msaAlgn->elements[currLocalIndex].prev_ub, prevCell, prevScore);

		mprintf(3, msg, 1);

		if ((msaAlgn->elements[currLocalIndex].prev_ub > 0) && (msaAlgn->elements[currLocalIndex].prev != NULL)) {	
			mprintf(3, "In case 1\n", 1);		
			globalIndex = msaAlgn->elements[currLocalIndex].prev[0];
			//(*partIndex) = getTraceBackPartition (pData, globalIndex, &currLocalIndex, (*partIndex));
			if ((Mode != Distributed) || (ClusterSize == 1)) {
				(*partIndex) = 0;
			}
			else {
				(*partIndex) = getPartIndex (pData, globalIndex, &currLocalIndex, 0);
			}
			msaAlgn = pData->MOAPart[(*partIndex)].msaAlgn;
			currentScore = msaAlgn->elements[currLocalIndex].val;
			/*decide whether local or global address need to be used here*/
			/*Gamma_Inverse(currLocalIndex, msaAlgn->shape, msaAlgn->dimn, new_index);*/
			Gamma_Inverse(msaAlgn->indexes[currLocalIndex], pData->seqLen, pData->seqNum, &new_index, 2);
			sprintf(msg, "Case_1:Same_Local_Partition currLocalIndex %ld\n", currLocalIndex);
			mprintf(3, msg, 1);
			movehappened = 1;
		}
		/*else ifLowerBordercell and not lowerin global tensor, continue getting prev_ub in previous partitions - means don't send prev data in OC, otherwise, send computing processor id*/
		/* check in prevPartition in this Processor*/
		else if ((((Mode == Distributed) || (ClusterSize > 1))) && ((ret = checkPrevInLocalPartitions (pData, msaAlgn->indexes[currLocalIndex], &currLocalIndex, partIndex)) > 0)) {
			mprintf(3, "In case 2\n", 1);		
		  	//currLocalIndex = msaAlgn->elements[currLocalIndex].prev[0];
			msaAlgn = pData->MOAPart[(*partIndex)].msaAlgn;
		 	currentScore = msaAlgn->elements[currLocalIndex].val;
	  		globalIndex = msaAlgn->indexes[currLocalIndex];
			/* decide whether local or global address need to be used here */
			/*Gamma_Inverse(currLocalIndex, msaAlgn->shape, msaAlgn->dimn, new_index);*/
			Gamma_Inverse(msaAlgn->indexes[currLocalIndex], pData->seqLen, pData->seqNum, &new_index, 2);
			sprintf(msg, "Case_2:Another_Local_Partition: %ld currLocalIndex %ld prev_ub %ld\n", (*partIndex), currLocalIndex, msaAlgn->elements[currLocalIndex].prev_ub);
			mprintf (3, msg, 1);
			movehappened = 0;
		}
		/* check in Received Cells from Other Processors */
		else if ((((Mode == Distributed) || (ClusterSize > 1))) && ((OCIndex = checkPrevInRemotePartitions (msaAlgn->indexes[currLocalIndex], &OCIwaveNo))  >= 0)) {
			mprintf(3, "In case 3\n", 1);		
			(*partIndex) = OCin[OCIwaveNo].WOCI[OCIndex].partIndex;
    			currLocalIndex = 0;
			currentScore = OCin[OCIwaveNo].WOCI[OCIndex].cellScore;
			(*nextProc) = OCin[OCIwaveNo].WOCI[OCIndex].fromProc;
	    		globalIndex = OCin[OCIwaveNo].WOCI[OCIndex].cellIndex;
			sprintf(msg, "Case_3:Remote_Partition OCIndex %ld Partition %ld proc %d cellIndex %ld\n",  OCIndex, (*partIndex), OCin[OCIwaveNo].WOCI[OCIndex].fromProc, OCin[OCIwaveNo].WOCI[OCIndex].cellIndex);
			mprintf(3, msg, 1);
			movehappened = 0;
			//(*partIndex) = getTraceBackPartition (pData, OCin[OCIwaveNo].WOCI[OCIndex].cellIndex, &currLocalIndex, (*partIndex));
			/*decide whether local or global address need to be used here*/
			/*Gamma_Inverse(currLocalIndex, msaAlgn->shape, msaAlgn->dimn, new_index);*/
			//Gamma_Inverse(msaAlgn->indexes[currLocalIndex], pData->seqLen, pData->seqNum, &new_index, 2);
		}
	/*
		else if (hLNCellIndex = getmaxCellScoreinLowerNeighbors (new_index, msaAlgn) > 0)
			currLocalIndex = hLNCellIndex;
*/

		else {
			mprintf(3, "In case 4\n", 1);		
			mprintf(3, "Case_4:Decrement_cellIndex\n", 1);
			currLocalIndex --;
			currentScore = msaAlgn->elements[currLocalIndex].val;
			globalIndex = msaAlgn->indexes[currLocalIndex];
			/*decide whether local or global address need to be used here*/
			/*Gamma_Inverse(currLocalIndex, msaAlgn->shape, msaAlgn->dimn, new_index);*/
			Gamma_Inverse(msaAlgn->indexes[currLocalIndex], pData->seqLen, pData->seqNum, &new_index, 2);
			movehappened = 1;
		}

		/* only get aligned residue, in case there was a move in the current partition */
		sprintf (msg, "proc %d\n", (*nextProc));
		mprintf (20, msg, 1);
		if (movehappened == 1) {
			sprintf(msg, "prevCell %ld prevScore %ld currLocalIndex %ld currentScore %ld prev_ub %ld\n", prevCell, prevScore, currLocalIndex, currentScore, msaAlgn->elements[currLocalIndex].prev_ub);
			mprintf(20, msg, 1);
			printf ("[%d] Now %ld %ld %ld ", myProcid, seqPositions[0], seqPositions[1], seqPositions[2]);
			for (i=0;i<pData->seqNum;i++) {
				if (aSeqLen == 0)
					(*algnseq)[i] = mmalloc ((aSeqLen + 1) * sizeof *((*algnseq)[i]));
				else
					(*algnseq)[i] = realloc ((*algnseq)[i], (aSeqLen+1) * sizeof *((*algnseq)[i]));
     
			  	if ((*algnseq)[i] == NULL ) {
					sprintf(msg, "Can not allocate memory to Alligned Sequence %ld\n", i);
					mprintf(1, msg, 1);
					return -1;
			  	}
				//printf ("[%d] old_index[%d] = %ld, pData->seqLen[%d] = %ld\n", myProcid, i, old_index[i], i, pData->seqLen[i]);
				if ((old_index[i] > new_index[i]) && (seqPositions[i] >= 0))  {
					(*algnseq)[i][aSeqLen] = sequences[i][old_index[i]];
					//(*algnseq)[i][aSeqLen] = sequences[i][seqPositions[i]];
					seqPositions[i] --;
				}
			  	else 
					(*algnseq)[i][aSeqLen] = GAPCHAR;
				printf("%ld %c ", seqPositions[i], (*algnseq)[i][aSeqLen]);
				sprintf(msg, "old_index[%ld] = %ld new_index = %ld is %c\n", i,  old_index[i], new_index[i],(*algnseq)[i][aSeqLen]);
				mprintf(20, msg, 1);
			  	old_index[i] = new_index[i];
			}
			printf("\n");
			aSeqLen ++;
		}
		
	} /* end while loop*/
	sprintf(msg, "\n aSeqLen %ld ", aSeqLen);  
	mprintf(20, msg, 1);
     
	/* Reverse the contents of the Aligned Sequences*/
	for (i=0;i<pData->seqNum && aSeqLen > 0;i++) {
		for (j=0;j<aSeqLen/2;j++) {
			temp = (*algnseq)[i][j];
			(*algnseq)[i][j] = (*algnseq)[i][aSeqLen - j - 1];
			(*algnseq)[i][aSeqLen - j - 1] = temp;
		}
	}
	(*arg_globalIndex) = globalIndex;
	sprintf (msg, "end of tb partIndex %ld currLocalIndex %ld globalIndex %ld\n", (*partIndex), currLocalIndex, (*arg_globalIndex));
	mprintf(3, msg, 1);
	if (new_index != NULL) 
		free(new_index);
	if (old_index != NULL) 
		free(old_index);
	if (seqPositions!= NULL)
		free (seqPositions);
	return aSeqLen;
}

void distributedSlaveTraceBack (void * arg) {
	ProcessData * pData;
	pData = (ProcessData *) arg;
	long maxCellScore, maxCellIndex, aSeqLen, localCellIndex, maxlocalCellIndex, partIndex, i, j;
	int MPI_return, isLower, nextProc, done = 0;
	MPI_Request request;
	MPI_Status status;
	char * * algnseq, msg[MID_MESSAGE_SIZE];

	/*partIndex = pData->partitionsCount - 1;*/
	partIndex = 0;
	algnseq = NULL;
	while (done < 2) {
		/*receive tracing flag, 0: trace back, Otherwise: finish & exit*/
		mprintf (3, "before receive new flag from master", 1);
		/*1. Receive flag */
		MPI_return = MPI_Recv (&done, 1, MPI_INT, 0, 2, MOAMSA_COMM_WORLD, &status);
		sprintf(msg, "DSTB received flag %d \n", done);  
		mprintf(3, msg, 1);
		/*Check tracing flag (done = 0)*/
		if (done == 0) {
			/*2. receive starting global index*/
			MPI_return = MPI_Recv (&maxCellIndex, 1, MPI_LONG, 0, 3, MOAMSA_COMM_WORLD, &status);
 			sprintf(msg, "DSTB received maxCellIndex %ld \n", maxCellIndex);  
			mprintf(3, msg, 1);
			/*Perform local Partitions trace back*/
			algnseq = mmalloc (pData->seqNum * sizeof *(algnseq));    
			aSeqLen = traceBack (pData, pData->sequences, &algnseq, &maxCellIndex, &nextProc, &partIndex);
			sprintf(msg, "DSTB returned path of length %ld : ", aSeqLen);  
			mprintf(3, msg, 1);
			/*3. send aligned sequences to Master*/		
			MPI_return = MPI_Send (&aSeqLen, 1, MPI_LONG, 0, 4, MOAMSA_COMM_WORLD);
			for (i=0;i<pData->seqNum;i++) {
		    		for (j=0;j<aSeqLen;j++) {
					MPI_return = MPI_Send (&algnseq[i][j], 1, MPI_CHAR, 0, 5, MOAMSA_COMM_WORLD);
					sprintf(msg, " %c ", algnseq[i][j]);  
					mprintf(3, msg, 1);
				}
			}
			mprintf(3, "\n", 1);
/*
			for (i=0;i<pData->seqNum;i++) {
				if (algnseq[i] != NULL)
					free (algnseq[i]);
			}
*/
			/*4. send the last global index in this partial alignment to Master*/
			
			MPI_return = MPI_Send (&maxCellIndex, 1, MPI_LONG, 0, 7, MOAMSA_COMM_WORLD);
			sprintf(msg, "after send endcellindex %ld\n", maxCellIndex);
			mprintf(3, msg, 1);
			/*5. send the next Processor where a next remote score was found from this partial alignment to Master*/
			MPI_return = MPI_Send (&nextProc, 1, MPI_INT, 0, 8, MOAMSA_COMM_WORLD);
			sprintf(msg, "after send next proc %d\n", nextProc);
			mprintf(3, msg, 1);
		}
		else if (done == 1) {
			/*6. Receive master's overall max global Index*/
			MPI_return = MPI_Recv (&maxCellIndex, 1, MPI_LONG, 0, 9, MOAMSA_COMM_WORLD, &status);
		  sprintf(msg, "DSTB received maxCellIndex %ld \n", maxCellIndex);  
			mprintf(3, msg, 1);
			//partIndex = getTraceBackPartition (pData, maxCellIndex, &maxlocalCellIndex, 0);
			partIndex = getPartIndex (pData, maxCellIndex, &maxlocalCellIndex, 0);
			sprintf(msg, "DSTB found %ld cell in %ld\n", localCellIndex, partIndex);  
			mprintf(3, msg, 1);
			/*7. Send the corresponding local cell index if found, -1 otherwise*/
			MPI_return = MPI_Send (&maxlocalCellIndex, 1, MPI_LONG, 0, 10, MOAMSA_COMM_WORLD);
			sprintf(msg, "DSTB found %ld cell & informed Master\n", maxlocalCellIndex);  
			mprintf(3, msg, 1);
		}
	}
	if (algnseq != NULL)
		free (algnseq);
}

long getLocalMaxCellScore (void * arg, long * maxCellIndex) {
	char msg[MID_MESSAGE_SIZE];
	long i, j, maxCellScore, * globalIndex;
	ProcessData * pData;
	pData = (ProcessData *) arg;

	maxCellScore = 0;
	(*maxCellIndex) = 0;
	
	sprintf (msg, "prtcount %ld\n", pData->partitionsCount);
	mprintf(20, msg, 1);
	globalIndex = NULL;
	globalIndex = mmalloc (pData->seqNum * sizeof *globalIndex);
	for (i=0;i<pData->partitionsCount;i++) {
		sprintf (msg, "i %ld elm_ub %ld\n", i, pData->MOAPart[i].msaAlgn->elements_ub);
		mprintf(20, msg, 1);
		for (j=0;j<pData->MOAPart[i].msaAlgn->elements_ub;j++) {
			sprintf (msg, "j %ld index %ld sqnum %ld sqlen %ld %ld %ld\n", j, pData->MOAPart[i].msaAlgn->indexes[j], pData->seqNum, pData->seqLen[0], pData->seqLen[1], pData->seqLen[2]);
			mprintf(20, msg, 1);
			Gamma_Inverse (pData->MOAPart[i].msaAlgn->indexes[j], pData->seqLen, pData->seqNum, &globalIndex, 2);
			if (isHigherBorderCell(globalIndex, pData->seqNum, pData->seqLen) == 1)
				if (pData->MOAPart[i].msaAlgn->elements[j].val > maxCellScore) {
					maxCellScore = pData->MOAPart[i].msaAlgn->elements[j].val;
					(*maxCellIndex) = pData->MOAPart[i].msaAlgn->indexes[j];
				}
			sprintf (msg, "testing index %ld score %ld\n", pData->MOAPart[i].msaAlgn->indexes[j], pData->MOAPart[i].msaAlgn->elements[j].val);
			mprintf (20, msg, 1);
		}	
	}
	sprintf (msg, "maxCellScore%ld, maxCellIndex = %ld sent to Master\n", maxCellScore, (*maxCellIndex));
	mprintf (20, msg, 1);
	if (globalIndex != NULL)
		free (globalIndex);
	globalIndex = NULL;
	return maxCellScore;
}

void sendmaxCellScore (void * arg) {
	long maxCellScore, maxCellIndex;
	char msg[MID_MESSAGE_SIZE];
	MPI_Request request;
	int MPI_return;

	ProcessData * pData;
	pData = (ProcessData *) arg;
	maxCellScore = getLocalMaxCellScore(pData, &maxCellIndex);
	MPI_return = MPI_Send (&maxCellScore, 1, MPI_LONG, 0, 0, MOAMSA_COMM_WORLD);
	MPI_return = MPI_Send (&maxCellIndex, 1, MPI_LONG, 0, 1, MOAMSA_COMM_WORLD);
}
/*
int main (int argc, char * argv[]) {
  MPI_Group orig_group;
  char * * sequences = NULL;
  long * seqLen = NULL;
  long seqNum, i, j;
	int stype, MPI_return, ret;
	char msg[MID_MESSAGE_SIZE];
	MPI_Status status;
	Slave * slave;
	char ufilename[SHORT_MESSAGE_SIZE];

  MPI_Init (&argc, &argv);
  MPI_Comm_rank (MPI_COMM_WORLD, &myProcid);
  MPI_Comm_size (MPI_COMM_WORLD, &ClusterSize);
  MPI_Comm_group (MPI_COMM_WORLD, &orig_group);
  MPI_Comm_create(MPI_COMM_WORLD, orig_group, &MOAMSA_COMM_WORLD);

	/*1. Receive initial Data Size Info

  MPI_return = MPI_Recv ( &stype, 1, MPI_TYPE_DSSType, 0, MPI_TAG_DSSType, MOAMSA_COMM_WORLD, &status);

  checkMPIErrorCode (MPI_return);
	printf("Slave [%d] stype %d\n", myProcid, stype);
	fflush(stdout);

  MPI_return = MPI_Recv (&seqNum, 1, MPI_TYPE_DSDimn, 0, MPI_TAG_DSDimn, MOAMSA_COMM_WORLD, &status);
  checkMPIErrorCode (MPI_return);
	printf("Slave [%d] seqNum %d\n", myProcid, seqNum);
	fflush(stdout);
  seqLen =  (long *) mmalloc (sizeof(long) * seqNum);
  for (j=0;j<seqNum;j++) {
		MPI_return = MPI_Recv (&seqLen[j], 1, MPI_TYPE_DSShape, 0, MPI_TAG_DSShape, MOAMSA_COMM_WORLD, &status);
  	checkMPIErrorCode (MPI_return);
		printf("Slave [%d] seqLen %d \n", myProcid, seqLen[j]);
		fflush(stdout);
	}
	*
  // 1. Process Arguments
  processArguments(argc, argv, &seqNum, &sequences, &seqLen, &stype);
	strcpy (ufilename, outputfilename);
	sprintf (outputfilename, "mmtb_%s", ufilename);
  init_output();
	sprintf (msg, "Program Arguments: debuglevel = %d maxAlignmentsNumber = %d Epsilons= %d Alignment Type = %d stype %d outputfilename = %s partitionSize = %d\n", pdebug, maxAlignmentsNumber, Epsilons, AlignmentType, stype, outputfilename, partitionSize);
	mprintf (1, msg, 1);

	//2. Load Tensor Partitions Computed
  initSlaveMemory (&slave, 0, NULL, 0);
	mprintf (1, "Initialized Slave data and will read checkpoint file\n", 1);
  ret = restoreSlaveCheckPoint (slave);
	if (ret != 0)
		mprintf (1, "read Slave data from checkpoint file\n", 1);
	else {
		sprintf (msg, "read Slave data from checkpoint file partitions %d last score in last partition is %d sqm %d sqlen0 %d %d %d\n", slave->partitionsCount, slave->MOAPart[slave->partitionsCount - 1].msaAlgn->elements[slave->MOAPart[slave->partitionsCount - 1].msaAlgn->elements_ub - 1].val, slave->seqNum, slave->seqLen[0], slave->seqLen[1], slave->seqLen[2]);
		mprintf(1, msg, 1);
	}	
	//3. Synchronize with Master to trace back
	sendmaxCellScore (slave);
	distributedSlaveTraceBack (slave, sequences);
	freeSlaveMemory (slave);

	mprintf(1, "before finalize \n", 1);
  MPI_Finalize ();
	mprintf(1, "after finalize \n", 1);
}
*/
@


1.1
log
@Initial revision
@
text
@d145 8
a152 3
	(*partIndex) = getPartIndex (pData, (*arg_globalIndex), &currLocalIndex, 0);
	if ((*partIndex) < 0)
		return -1;
d186 6
a191 1
			(*partIndex) = getPartIndex (pData, globalIndex, &currLocalIndex, 0);
d203 1
a203 1
		else if ((ret = checkPrevInLocalPartitions (pData, msaAlgn->indexes[currLocalIndex], &currLocalIndex, partIndex)) > 0) {
d217 1
a217 1
		else if ((OCIndex = checkPrevInRemotePartitions (msaAlgn->indexes[currLocalIndex], &OCIwaveNo))  >= 0) {
d269 2
a270 2
					//(*algnseq)[i][aSeqLen] = sequences[i][old_index[i]];
					(*algnseq)[i][aSeqLen] = sequences[i][seqPositions[i]];
@


1.1.1.1
log
@Distributed Optimal MSA using MoA
@
text
@@
