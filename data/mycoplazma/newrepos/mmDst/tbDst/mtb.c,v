head	1.2;
access;
symbols
	r1:1.1.1.1 mhelal:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.05.11.13.55.55;	author mhelal;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.02.40.54;	author mhelal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.05.06.02.40.54;	author mhelal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@search space error
@
text
@#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>
#include <mpi.h>
#include "../main.h"
#include "../globals.h"
#include "../utils.h"
#include "../moaDst.h"
#define _GNU_SOURCE


void assemblePathParts (long pathParts, char * * * algnseq, long * aSeqLen, long seqNum) {
	//int outfile;
	FILE * outfile;
	int ret;
	char sfilename[SHORT_MESSAGE_SIZE];
	long i, j, k, comseqLen;
	char  * * completePath, msg[MID_MESSAGE_SIZE];

	completePath = mmalloc (seqNum * sizeof *(completePath));    
	comseqLen = 0;

	for (i=0;i<seqNum;i++) {
		comseqLen = 0;
		completePath[i] = NULL;
		for (j = pathParts-1;j>=0;j--) {
			completePath[i] = realloc (completePath[i], (comseqLen + aSeqLen[j]) * sizeof *(completePath[i]) );
			sprintf(msg, "completePath[%ld] has %ld and will realloc %ld \n", i, comseqLen, (comseqLen + aSeqLen[j]));  
			mprintf(20, msg, 1);
			for (k = 0;k<aSeqLen[j];k++) {
				completePath[i][comseqLen] = algnseq[j][i][k];
				comseqLen ++;
			}
		}
	}


	if (strlen(outputfilename) <= 0)
		strcpy(outputfilename,  outPrefix);
	sprintf(sfilename, "out/Align%s", outputfilename);
	if (( outfile= fopen (sfilename, "w")) == NULL) {    
	//if (( outfile= open (sfilename, O_WRONLY|O_APPEND)) == -1) {
		printf("Can not Open output file %s, exiting.\n", sfilename);
		fflush(stdout);
		return;
	}
	//PrintOptimalPath (seqNum, &completePath, comseqLen);

  
	fprintf(outfile,"\n Aligned Sequences: ");
	for (i=0;i<seqNum;i++) {
		fprintf (outfile, "\n> ");
		for (j=0;j<comseqLen;j++) {
			fprintf(outfile, "%c ", completePath[i][j]);
		}
	}
	fprintf (outfile, "\n");

	//ret = write (outfile, msg, (int) sizeof(msg));    
	//if (close(outfile) == -1)
	if (fclose(outfile) != 0)
		printf ("ERROR Closing the debugging file %s!", outputfilename);   
}

void distributedMasterTraceBack (void *arg, long startCellScore, long startCellIndex, int startProc, long seqNum) {
	int MPI_return, currProc, done = 0;
	long maxCellScore, maxCellIndex, * aSeqLen, endCellIndex, localCellIndex, maxlocalCellIndex, i, j, pathParts, partIndex;
	char * * * algnseq, msg[MID_MESSAGE_SIZE];
	MPI_Request request;
	MPI_Status status;

	ProcessData * pData;
	pData = (ProcessData *) arg;

	maxCellScore = startCellScore;
	maxCellIndex = startCellIndex;
	currProc = startProc;
	pathParts = 0;
	algnseq = NULL;
	aSeqLen = NULL;
	/*partIndex = pData->partitionsCount - 1;*/
	partIndex = 0;
	while (done == 0) {
		printf ("currProc = %d done = %d maxCellIndex = %d\n", currProc, done, maxCellIndex);
		/*send to processor containing the maxCellScore to trace back*/
		if (currProc == 0) {
			int isLower, nextProc;

			/*Perform Partition trace back*/
			pathParts ++;
			algnseq = realloc (algnseq, pathParts * sizeof *(algnseq));
			aSeqLen = realloc (aSeqLen, pathParts * sizeof *(aSeqLen));
			algnseq[pathParts-1] = mmalloc (seqNum * sizeof *(algnseq[pathParts-1]));    
			aSeqLen[pathParts-1] = traceBack(pData, pData->sequences, &algnseq[pathParts-1], &maxCellIndex, &currProc, &partIndex);
			printf ("aSeqLen %ld\n", aSeqLen[pathParts-1]);
			for (i=0;i<seqNum;i++) {
				for (j=0;j<aSeqLen[pathParts-1];j++) 
					printf ("%c", algnseq[pathParts-1][i][j]);

				printf ("\n");
			}
			sprintf(msg, "DMTB returned Local path of length %ld\n", aSeqLen[pathParts-1]);  
			mprintf(3, msg, 1);
		}
		else {
			/*1. Send Tracing flag (done = 0) to the processor where the maximum score was found*/
			MPI_return = MPI_Send (&done, 1, MPI_LONG, currProc, 2, MOAMSA_COMM_WORLD);
			sprintf(msg, "DMTB sent flag %d to proc %d first\n", done, currProc);  
			mprintf(3, msg, 1);
			/*2. send starting global index*/
			MPI_return = MPI_Send (&maxCellIndex, 1, MPI_LONG, currProc, 3, MOAMSA_COMM_WORLD);
			sprintf(msg, "DMTB sent maxCellIndex %ld to proc %d\n", maxCellIndex, currProc);  
			mprintf(3, msg, 1);
			/*3. Receive aligned sequences*/
			pathParts ++;
			algnseq = realloc (algnseq, pathParts * sizeof *(algnseq));
			aSeqLen = realloc (aSeqLen, pathParts * sizeof *(aSeqLen));
			algnseq[pathParts-1] = mmalloc (seqNum * sizeof *(algnseq[pathParts-1]));    
			MPI_return = MPI_Recv (&aSeqLen[pathParts-1], 1, MPI_LONG, currProc, 4, MOAMSA_COMM_WORLD, &status);
			sprintf(msg, "DMTB received Remote path of length %ld :", aSeqLen[pathParts-1]);  
			mprintf(3, msg, 1);
			for (i=0;i<seqNum && aSeqLen[pathParts-1] > 0;i++) {
				algnseq[pathParts-1][i] = mmalloc (aSeqLen[pathParts-1] * sizeof *(algnseq[pathParts-1][i] ));    
				for (j=0;j<aSeqLen[pathParts-1];j++) {
					MPI_return = MPI_Recv (&algnseq[pathParts-1][i][j], 1, MPI_CHAR, currProc, 5, MOAMSA_COMM_WORLD, &status);
					sprintf(msg, " %c ", algnseq[pathParts-1][i][j]);  
					mprintf(3, msg, 1);
				}
			}
			mprintf(3, "\n", 1);
			/*4. receive the last global index in this partial alignment*/
			/*MPI_return = MPI_Recv (&partIndex, 1, MPI_LONG, currProc, 6, MOAMSA_COMM_WORLD, &status);*/
			MPI_return = MPI_Recv (&maxCellIndex, 1, MPI_LONG, currProc, 7, MOAMSA_COMM_WORLD, &status);
			/*5. receive the next Processor where a next remote score was found from this partial alignment*/
			MPI_return = MPI_Recv (&currProc, 1, MPI_INT, currProc, 8, MOAMSA_COMM_WORLD, &status);
			sprintf(msg, "DMTB received maxCellIndex %ld & currProc %d\n", maxCellIndex, currProc);  
			mprintf(3, msg, 1);
		}
		/*test if end of aligned sequence is zero to exit */
		if (maxCellIndex == 0)
			done = 2;
		/* else, determine the next tracing Processor*/
		else if (currProc < 0) { 
			done = 1;
			partIndex = getTraceBackPartition (pData, maxCellIndex, &maxlocalCellIndex, partIndex);
			sprintf(msg, "DMTB found local max local %ld cell  in %ld\n", maxlocalCellIndex, partIndex);  
			mprintf(3, msg, 1);
			/*loop through all processes, get their maxCellIndex*/
			currProc = ClusterSize-1;
			for (i=ClusterSize-1;i>=1;i--) {
				/*1. Send checking flag (done = 1)*/
				MPI_return = MPI_Send (&done, 1, MPI_INT, i, 2, MOAMSA_COMM_WORLD);
				/*6. Send master's overall max global Index*/
				MPI_return = MPI_Send (&maxCellIndex, 1, MPI_LONG, i, 9, MOAMSA_COMM_WORLD);
				sprintf(msg, "DMTB sent flag %d to proc %ld second\n", done, i);  
				mprintf(3, msg, 1);
				/*7. Receive the corresponding local cell index if found in this processor, -1 otherwise*/
				MPI_return = MPI_Recv (&localCellIndex, 1, MPI_INT, i, 10, MOAMSA_COMM_WORLD, &status);
				sprintf(msg, "received remote local index %ld from %ld\n", localCellIndex, i);  
				mprintf(3, msg, 1);
				/*7. if a local cell found in this processor, and it is a smaller processor rank than the previous found cell then, take it as the current processor*/
				if ((i < currProc) && (localCellIndex >= 0)) {
					maxlocalCellIndex = localCellIndex;
					currProc = i;
				}
			}
			/*if other slave processes don't have this index, check the master*/
			partIndex = getPartIndex (pData, maxCellIndex, &localCellIndex, 0);

			sprintf(msg, "DMTB found %ld cell in %ld\n", localCellIndex, partIndex);  
			mprintf(3, msg, 1);
			/*if the master has it, then it is the currproc*/
			if (localCellIndex >= 0) { 					
				maxlocalCellIndex = localCellIndex;
				currProc = 0;
				done = 0;			
			}
			else /*other wise, end of traching*/
				done = 2;
			sprintf(msg, "maxlocalIndex %ld in proc %d\n", maxlocalCellIndex, currProc);  
			mprintf(3, msg, 1);
		}
	} /* End While*/
	/*send to all processes to exit tracing*/
	done = 2;
	for (i=1;i<ClusterSize;i++) {
		MPI_return = MPI_Send (&done, 1, MPI_LONG, i, 2, MOAMSA_COMM_WORLD);
		sprintf(msg, "DMTB sent flag %d to proc %ld\n", done, i);  
		mprintf(3, msg, 1);
	}

	assemblePathParts (pathParts, algnseq, aSeqLen, seqNum);
}

void getLocalmaxCellScore (void * arg, long * maxCellScore, long * maxCellIndex) {
	long i, j, localMaxCellScore, localMaxCellIndex, * wholeIndex;
	char msg[MID_MESSAGE_SIZE];
	MPI_Request request;
	int MPI_return;
	ProcessData * pData;
	pData = (ProcessData *) arg;
	localMaxCellScore = 0;
	localMaxCellIndex = 0;
	
	sprintf (msg, "prtcount %ld\n", pData->partitionsCount);
	mprintf(20, msg, 1);
	wholeIndex = NULL;
	wholeIndex = mmalloc (pData->seqNum * sizeof *wholeIndex);
	sprintf (msg, "whole dimn %ld, shape: ", pData->seqNum);
	mprintf(3, msg, 1);
	for (i=0;i<pData->seqNum;i++) {
		sprintf (msg, " %ld ", pData->seqLen[i]);
		mprintf(3, msg, 1);
	}
	mprintf (3, "\n", 1);
	for (i=0;i<pData->partitionsCount;i++) {
		sprintf (msg, "i %ld elm_ub %ld\n", i, pData->MOAPart[i].msaAlgn->elements_ub);
		mprintf(20, msg, 1);
		for (j=0;j<pData->MOAPart[i].msaAlgn->elements_ub;j++) {
			sprintf (msg, "j %ld index %ld sqnum %ld sqlen %ld %ld %ld\n", j, pData->MOAPart[i].msaAlgn->indexes[j], pData->seqNum, pData->seqLen[0], pData->seqLen[1], pData->seqLen[2]);
			mprintf(20, msg, 1);
			Gamma_Inverse (pData->MOAPart[i].msaAlgn->indexes[j], pData->seqLen, pData->seqNum, &wholeIndex, 1);
			if (isHigherBorderCell(wholeIndex, pData->seqNum, pData->seqLen) == 1)
				if (pData->MOAPart[i].msaAlgn->elements[j].val > localMaxCellScore) {
					localMaxCellScore = pData->MOAPart[i].msaAlgn->elements[j].val;
					localMaxCellIndex = pData->MOAPart[i].msaAlgn->indexes[j];
				}
			sprintf (msg, "testing index %ld score %ld\n", pData->MOAPart[i].msaAlgn->indexes[j], pData->MOAPart[i].msaAlgn->elements[j].val);
			mprintf (20, msg, 1);
		}
	}
	(*maxCellScore) = localMaxCellScore;
	(*maxCellIndex) = localMaxCellIndex;
	sprintf (msg, "Local maxCellScore%ld, maxCellIndex = %ld \n", localMaxCellScore, localMaxCellIndex);
	mprintf (3, msg, 1);
	if (wholeIndex != NULL)
		free (wholeIndex);
	wholeIndex = NULL;
}

void getmaxCellScore (long * maxCellScore, long * maxCellIndex, int * maxProc) {
	int i;
	long recvMaxCellScore, recvMaxCellIndex;
	char msg[MID_MESSAGE_SIZE];

	MPI_Status status;
	MPI_Request request;

	for (i=1;i<ClusterSize;i++) {
		MPI_Recv (&recvMaxCellScore, 1, MPI_LONG, i, 0, MOAMSA_COMM_WORLD, &status);
		MPI_Recv (&recvMaxCellIndex, 1, MPI_LONG, i, 1, MOAMSA_COMM_WORLD, &status);
		sprintf (msg, "Master received recvMaxCellScore = %ld, recvMaxCellIndex = %ld from %d\n", recvMaxCellScore, recvMaxCellIndex, i);
		mprintf (3, msg, 1);
		if (i == 1) {
			(*maxCellScore) = recvMaxCellScore;
			(*maxCellIndex) = recvMaxCellIndex;
			(*maxProc) = i;
		}
		else if (recvMaxCellScore > (*maxCellScore)) {
			(*maxCellScore) = recvMaxCellScore;
			(*maxCellIndex) = recvMaxCellIndex;
			(*maxProc) = i;
		}
	}
	sprintf (msg, "Master maximum  = %ld, maximum Index = %ld from %d\n", (*maxCellScore), (*maxCellIndex), (*maxProc));
	mprintf (3, msg, 1);
	
}

void * tbMaster (void *m) {
	int maxProc, ret;
	char msg[MID_MESSAGE_SIZE];
  ProcessData * pData;
  pData = (ProcessData * ) m;
  long maxCellIndex, maxCellScore;
  long lmaxCellIndex, lmaxCellScore; /*local*/
	/*
  getLocalmaxCellScore (pData, &lmaxCellScore, &lmaxCellIndex);
  getmaxCellScore (&maxCellScore, &maxCellIndex, &maxProc);
  if (lmaxCellScore > maxCellScore) {
	  maxCellScore = lmaxCellScore;
  	maxCellIndex = lmaxCellIndex;
  	maxProc = 0;
  }
  */
  maxCellScore = pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements[pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements_ub - 1].val;
  maxCellIndex = pData->MOAPart[pData->computedPartitions - 1].msaAlgn->indexes[pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements_ub - 1];

  printf ("maxCellIndex = %ld maxCellScore = %ld from part %ld localindex %ld\n", maxCellIndex, maxCellScore, pData->computedPartitions - 1, pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements_ub - 1);
  sprintf (msg, "last wave %ld, last part %ld\n", wavesTotal-1, partsInWave[wavesTotal-1]-1);
  mprintf (3, msg, 1);

  maxProc = getProcID(wavesTotal-1, partsInWave[wavesTotal-1]-1);

  sprintf (msg, "maxCellScore %ld, maxCellIndex %ld, maxProc %d pData->partitionsCount %ld\n", maxCellScore, maxCellIndex, maxProc, pData->partitionsCount);
  mprintf (3, msg, 1);

  distributedMasterTraceBack (pData, maxCellScore, maxCellIndex, maxProc, pData->seqNum);
  return NULL;
}

void * tbSlave (void *m) {
	int ret;
	long i;
	char msg[MID_MESSAGE_SIZE];
  ProcessData * pData;
  pData = (ProcessData * ) m;

    /*3. Synchronize with Master to trace back*/
    /*sendmaxCellScore (pData);*/
    distributedSlaveTraceBack (pData);
	  freeProcessMemory (&pData);

   return NULL;
}

void ExitProcess (void * arg) {  
  ProcessData * pData;

  pData = (ProcessData * ) arg;
  freeProcessMemory (&pData);

	mprintf(1, "before finalize \n", 1);
  MPI_Finalize ();
	mprintf(1, "after finalize \n", 1);
}

int main (int argc, char * argv[]) {
  MPI_Group orig_group;
  pthread_t MasterThread, SlaveThread;
  char * * sequences = NULL, msg[MID_MESSAGE_SIZE];
  long * seqLen = NULL;
  long partitionSize, seqNum, i, j;
  int stype, MPI_return;
  /*char ufilename[SHORT_MESSAGE_SIZE];*/
  int ret;
  ProcessData * pData;

	
  MPI_Init (&argc, &argv);
  MPI_Comm_rank (MPI_COMM_WORLD, &myProcid);
  MPI_Comm_size (MPI_COMM_WORLD, &ClusterSize);
  MPI_Comm_group (MPI_COMM_WORLD, &orig_group);
  MPI_Comm_create(MPI_COMM_WORLD, orig_group, &MOAMSA_COMM_WORLD);
  TBFlag = 1;
   /* 1. Process Arguments*/
  processArguments(argc, argv, &seqNum, &sequences, &seqLen, &stype, &partitionSize);
  /*strcpy (ufilename, outputfilename);*/
	strcpy (outPrefix, "b");
  /*sprintf (outputfilename, "mmtb%s", ufilename);*/
  init_output();
  sprintf (msg, "Program Arguments: debuglevel = %d maxAlignmentsNumber = %d Epsilons= %d Alignment Type = %d stype %d outputfilename = %s partitionSize = %ld\n", pdebug, maxAlignmentsNumber, Epsilons, AlignmentType, stype, outputfilename, partitionSize);
  mprintf (1, msg, 1);
  
  /*2. Do the Master Tasks: Synchronize with Slaves to trace back*/
  /* one path for now*/
  
  ret = initProcessMemory(&pData, seqNum, seqLen, sequences, stype, partitionSize);  
  if (ret != 0) {
  	mprintf (1, " Could not read Slave data from checkpoint file\n", 1);
  	ExitProcess (pData);
  	return -1;
  }
  mprintf (1, "Initialized Slave data and will read checkpoint file\n", 1);
  /*3. Load Tensor Partitions Computed*/
  ret = restoreCheckPoint (&pData);
  if (ret != 0) {
    mprintf (1, " Could not read Slave data from checkpoint file\n", 1);
  	ExitProcess (pData);
  	return -1;
  }
  if (pData->computedPartitions <= 0) {
    mprintf (1, " No Partitions read in this process\n", 1);
  	/*ExitProcess (pData);*/
  	/*return -1;*/
  }
  else {

  sprintf (msg, "read Slave data from checkpoint file partitions %ld last score in last partition is %ld sqm %ld sqlen0 %ld %ld %ld\n", pData->partitionsCount, pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements[pData->MOAPart[pData->computedPartitions - 1].msaAlgn->elements_ub - 1].val, pData->seqNum, pData->seqLen[0], pData->seqLen[1], pData->seqLen[2]);
  mprintf(3, msg, 1);
}
  
  if (myProcid == 0) 
	  pthread_create (&MasterThread, NULL, tbMaster, pData);
  else
  /* do the slave tasks*/
	  pthread_create (&SlaveThread, NULL, tbSlave, pData);
  
  if (myProcid == 0) {
	  pthread_join (MasterThread, NULL);
	  mprintf(1, "Joined MasterThread \n", 1);
	 }
	 else {
	  pthread_join (SlaveThread, NULL);
  	mprintf(1, "Joined SlaveThread \n", 1);
  }
	ExitProcess (pData);
	return 0;
}
@


1.1
log
@Initial revision
@
text
@a23 2


d96 7
@


1.1.1.1
log
@Distributed Optimal MSA using MoA
@
text
@@
