head	1.2;
access;
symbols
	r1:1.1.1.1 mhelal:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.05.11.13.55.54;	author mhelal;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.06.02.40.53;	author mhelal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.05.06.02.40.53;	author mhelal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@search space error
@
text
@/***********************************************************
* Author: Manal Helal                                      *
* Last Modification Date: Fri 12 Jan 2007 03:39:51 AM EST  *
* Project : MMSA - Multiple Sequence Alignment Based on 	  *
* 					Mathematics of Arrays - PhD Experimentation *
* File: utils.c, a library for global utility functions    *
* Function:
*		processArguments
*		readInput
*     printSeq
*     print_OCout
*     to_proc_cells
*     print_outging_cells
*     print_OCin
*     PrintSequencies
*     PrintASeq
*     PrintOptimalPath
*     getTime
*     cpTime
*     isTimeDiffEquals
*     init_output
*     isEven
*     mprintf
*     getSizes
*     mmalloc
*     mcalloc
*     strrev
*     mpow
*     a_max
*     a_min
*     Factorial
*     l2Comb
*     maxVal
*     Combinations
*     file_copy
*     get_bytes
***********************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <ctype.h>
#include <pthread.h>
#include "globals.h"
#include "moaDst.h"
#include "moa.h"
#include "utils.h"
#include "main.h"

int processArguments (int argc, char ** argv, long * seqNum, char * * * sequences, long * * seqLen, int * stype, long * partitionSize) {
  /*
    -c = number of sequences
    -s = Scoring Type
    -l = local alignment
    -g = global alignment - default
    -m = maximum number of optimal paths to be retrieved
    -e = Epsilons Value for search space reduction
    -o = the output log filename (will be prefixed with the process name and suffixed with the processor number)
    -d = the debug level (what to be written in the og files)
    -p = the partition size
    -n = number of slave nodes to be created
    -X (debrecated Master/Slave Design) = Scheduling Method used, 1=Round Robin 2=Bag of Tasks.3= Dependency Based Scheduling
    -r = Restore from checkpoint files & resume from there
    -x = Execution Method, Distributed (default) or Sequential  */
	int argRead = 1;
	long i;
	/* Initialize Arguments default Values*/
	(*seqNum) = 0;
	/* Epsilons Value is used to reduce the search space by scoring only the
	 * partitions indexed +/- Epsilons from m_i where m is the middle of the 		 * sequence i length (dimension i shape value), if zero, then all search 	  * space is used */
	Epsilons = 0;
	(*stype) = 1;
	AlignmentType = Global;
	SchedMethod = RR;
	maxAlignmentsNumber = 20;
	strcpy(outputfilename, "mm");
	pdebug = 0;
	RestoreFlag = 0;
	(*partitionSize) = 3;
	Mode = Distributed;
	/* read & process MOAMSA Arguments */
	while (argRead < argc) {
		/*1. Read SeqNum and Sequences File Names */
		if (strcmp(argv[argRead],"-c") == 0) {
			(*seqNum) = atoi(argv[++argRead]);
			if ((*seqNum) <= 1) {
				printf("Sequence Num must be more than 1\n");
				return -1;
			}
			if (argc  <= ((*seqNum) + 3))  {
				printf("More Arguments expected\n");
				return -1;
			}
			(*sequences) = mcalloc ((*seqNum), sizeof *(*sequences));
			(*seqLen) = mcalloc ((*seqNum), sizeof *(*seqLen));
			for (i=0;i<(*seqNum);i++) {	
				(*seqLen)[i] = readInput(argv[++argRead], &(*sequences)[i]);
				if ((*seqLen)[i] == -1) {
					printf("Sequence %ld File Could not open. Exiting.\n", i);
					return -1;
				}
				// printSeq (sequences[i], seqLen[i]);
			}
			if ((*seqNum) <= 1) {
				printf("Sequence Num must be more than 1\n");
				return -1;
			}
		}
		/*2. Read Scoring Type */
		else if (strcmp(argv[argRead], "-s") == 0) {      
			if (argc  <= argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				(*stype) = atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -s for Scoring Type required.\n");
				return -1;
			} 
		}
		/* 3. Decide if Local or Global Alignment */
		else if (strcmp(argv[argRead], "-l") == 0) {
			AlignmentType = Local;
		}
		else if (strcmp(argv[argRead],"-g") == 0) {
			AlignmentType = Global;
		}
		else if (strcmp(argv[argRead],"-r") == 0) {
			RestoreFlag = 1;
		}    
		/* 4. Know Maximum Alignments Required to be returned */
		else if (strcmp(argv[argRead],"-m") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				maxAlignmentsNumber = atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -m for maximum Alignemnts required.\n");
				return -1;
			} 
		}
		/* 5. Decide the Epsilons Value for search space reduction */
		else if (strcmp(argv[argRead],"-e") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				Epsilons= atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -e for Epsilons Value.\n");
				return -1;
			} 
		}
		/* 6. Decide the output filename */
		else if (strcmp(argv[argRead], "-o") == 0) {
			if (argc  <= argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				strcpy (outputfilename, argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -o for outputfilename.\n");
				return -1;
			} 
		}
		/* 7. Decide the debug Level */
		else if (strcmp(argv[argRead], "-d") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				pdebug = atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -d for debug level required.\n");
				return -1;
			} 
		}
		/* 8. Decide the partition size - for the distributed version */
		else if (strcmp(argv[argRead], "-p") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				(*partitionSize)  = atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -p for partitions Size.\n");
				return -1;
			} 
		}
		/* 9. Decide the Sceduling Method */
		else if (strcmp(argv[argRead], "-X") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				SchedMethod = atoi(argv[++argRead]);
			else {
				printf("Expected Numeric Argument after -X for scheduling method required.\n");
				return -1;
			} 
		}
		/* 9. Decide the Execution Method (Distributed / Sequential) */
		else if (strcmp(argv[argRead], "-x") == 0) {
			if (argc  < argRead)  {
				printf("More Arguments expected\n");
				return -1;
			}
			if (argRead <argc) 
				Mode = atoi(argv[++argRead]); /*should 0 or 1 only*/
				if (Mode > 1) {
					printf("Error reading execution mode value. Mode should either be 0 for Distributed or 1 for Sequential. Exiting.\n");
					return -1;
				}
				
			else {
				printf("Expected Numeric Argument after -x for scheduling method required.\n");
				return -1;
			} 
		}




		argRead ++;
	}

	return 0;
}

long readInput (char * fileName, char * * sequence) {
  char elm, msg[SHORT_MESSAGE_SIZE];
  long i = 0;
  FILE * f = fopen (fileName, "r");
  if (f == NULL) {
    sprintf(msg, "File %s could not be opened!\n", fileName);
    mprintf (1, msg, 1);
    return -1;
  }
  (*sequence) = NULL; 
  (*sequence) = mmalloc (2 * sizeof *(*sequence));      
  if ((*sequence) == NULL) {
    sprintf(msg, "Could not allocate memory for sequence %s!\n", fileName);
    mprintf (1, msg, 1);
    fclose(f);
    return -1;
  }
  i++;
  (*sequence)[0]= GAPCHAR;
  while (!feof(f)) {
    elm = fgetc(f);
    if (elm != EOF)  {
      if (((elm >= 'A') && (elm <= 'Z')) ||((elm >= 'a') && (elm <= 'z'))) {
	i++;
	(*sequence) = realloc ((*sequence), sizeof(char) * (i+1));
	if ((*sequence) == NULL) {
	  sprintf(msg, "Could not allocate memory for sequence %s!\n", fileName);
	  mprintf (1, msg, 1);
	  fclose(f);
	  return -1;
	}
	else {
	  (*sequence)[i-1] = elm;
	}
      }
    }
  }  
  (*sequence)[i] = '\0';
  fclose(f);
  return i;
}

void printSeq (int dbglevel, char * sequence , int sq_sz){
#ifndef NDEBUG
	int i;
	char msg[MID_MESSAGE_SIZE];
  
	sprintf(msg, "\nsequence[%d] > |", sq_sz);
	mprintf (dbglevel, msg, 1);
	for (i=0; i < sq_sz;i++) {
		sprintf(msg, "%c", sequence[i]);
		mprintf (dbglevel, msg, 1);
	}
	mprintf (dbglevel, "|", 1);
#endif
}
// Print Overlapping Outgoing Cells
void print_OCout(int db_level) {
#ifndef NDEBUG
	long i, j, k;
	char msg[SHORT_MESSAGE_SIZE];
	
	sprintf (msg, "\nOverlapping Outgoing Cells: count[%ld] from proc {%d]\n", OCout_ub, myProcid);
	mprintf (db_level, msg, 1);		
	for (i=0; i<OCout_ub;i++) {
		for (i=0; i<OCout[i].wavesOC;i++) {
			sprintf (msg, "waveNo[%ld], partIndex[%ld], cellIndex[%ld], cellScore[%ld], sent[%d]\n", j, OCout[i].WOCO[j].partIndex, OCout[i].WOCO[j].cellIndex, OCout[i].WOCO[j].cellScore, OCout[i].WOCO[j].sent);
			mprintf (db_level, msg, 1);
			if (OCout[i].WOCO[j].depProc_ub > 0) {		
				sprintf (msg, "dependent proc: count[%d] {", OCout[i].WOCO[j].depProc_ub);
				mprintf (db_level, msg, 1);		
				for (k=0; k<OCout[i].WOCO[j].depProc_ub;k++) {
					sprintf (msg, "%d ", OCout[i].WOCO[j].depProc[k]);
					mprintf (db_level, msg, 1);		
				}
				mprintf (db_level, "}\n", 1);		
			}
		}
	}
#endif
}
void to_proc_cells(int proc, int db_level) {
#ifndef NDEBUG
	long i, j, k;
	char msg[SHORT_MESSAGE_SIZE];
	int cell_count;
	
	mprintf (db_level, "(  wn,   pi,   ci,     cs,   sent)\n", 1);
	cell_count = 0;
	for (i=0; i<OCout_ub;i++) {
		for (j=0; j<OCout[i].wavesOC;j++) {
			if (OCout[i].WOCO[j].depProc_ub > 0) {		
				for (k=0; k<OCout[i].WOCO[j].depProc_ub;k++) {
					if (proc == OCout[i].WOCO[j].depProc[k]) {
						sprintf (msg, "(%4ld, %4ld, %4ld, %6ld, %6d)\n", j, OCout[i].WOCO[j].partIndex, OCout[i].WOCO[j].cellIndex, OCout[i].WOCO[j].cellScore, OCout[i].WOCO[j].sent);
						mprintf (db_level, msg, 1);
						cell_count++;
					}
				}
			}
		}
	}
	sprintf (msg, "Overlapping cells count: %d\n", cell_count);
	mprintf (db_level, msg, 1);
#endif
}

void print_outging_cells(int db_level) {
#ifndef NDEBUG
	long i, j, l;
	char msg[SHORT_MESSAGE_SIZE];
	int * to_proc, proc_count, found, k;
	
	sprintf (msg, "\nOverlapping Outgoing Cells: count[%ld] from proc {%d]\n", OCout_ub, myProcid);
	mprintf (db_level, msg, 1);
	proc_count = 0;		
	for (i=0; i<OCout_ub;i++) {
		for (j=0; j<OCout[i].wavesOC;j++) {
			if (OCout[i].WOCO[j].depProc_ub > 0) {		
				for (l=0; l<OCout[i].WOCO[j].depProc_ub;l++) {
					found = 0;
					for (k=0; k<proc_count; k++) {
						if (to_proc[k] == OCout[i].WOCO[j].depProc[l]) {
							found = 1;
							break;
						}
					}
					if (found == 0) {
						proc_count++;
						if (proc_count == 1) 
							to_proc = mmalloc (sizeof * to_proc);
						else 
							to_proc = realloc (to_proc, proc_count * sizeof * to_proc);
						to_proc[proc_count - 1] = OCout[i].WOCO[j].depProc[l];
					}
				}
			}
		}
	}
	if (proc_count > 0) {
		sprintf (msg, "send to proc. count[%d]\n", proc_count);
		mprintf (db_level, msg, 1);		
		for (i=0; i<proc_count;i++) {
			sprintf (msg, "to proc[%d]\n", to_proc[i]);
			mprintf (db_level, msg, 1);		
			to_proc_cells(to_proc[i], db_level);
		}
	}
#endif
}
// Print Overlapping Incoming Cells
void print_OCin() {
#ifndef NDEBUG
	long i, j;
	char msg[SHORT_MESSAGE_SIZE];
	
	sprintf (msg, "\nOverlapping Incoming Cells: count[%ld]\n", OCin_ub);
	mprintf (2, msg, 1);		
	for (i=0; i<OCin_ub;i++) {
		for (j=0; j<OCin[i].wavesOC;j++) {
			sprintf (msg, "waveNo[%ld], partIndex[%ld], cellIndex[%ld], cellScore[%ld], from proc[%d]\n", i, OCin[i].WOCI[j].partIndex, OCin[i].WOCI[j].cellIndex, OCin[i].WOCI[j].cellScore, OCin[i].WOCI[j].fromProc);
			mprintf (2, msg, 1);
		}
	}
#endif
}
void PrintSequencies (int dbglevel, long seqNum, char * * sequences, long * seqLen) {
#ifndef NDEBUG
	long i;
	char msg[MID_MESSAGE_SIZE];
  
	sprintf(msg, "\n[%d]>Sequences [%ld]: {", myProcid, seqNum);	
	mprintf(dbglevel, msg, 1);
	for (i=0;i<seqNum;i++) {
		printSeq (dbglevel, sequences[i], seqLen[i]);
	}
	mprintf(dbglevel, "\n}\n", 1);
#endif
}
void PrintASeq (long seqNum, char * * sequences, long * seqLen, char * * * * algnseq, long * aseqLen, int alignmentsNo) {
#ifndef NDEBUG
	long i, j, k = 0;
	char msg[MID_MESSAGE_SIZE];
	int dbglevel = 1;
	
	sprintf(msg, "\n Sequences [%ld]: ", seqNum);
	mprintf(dbglevel, msg, 1);
	for (i=0;i<seqNum;i++) {
		printSeq (dbglevel, sequences[i], seqLen[i]);
	}
	sprintf(msg, "\n Found %d Optimal Alignments: \n", alignmentsNo);
	mprintf (dbglevel, msg, 1);
	for (k=0;k<alignmentsNo;k++) {
		sprintf(msg, "\n Aligned Sequences %ld: ", k+1);
		mprintf (dbglevel, msg, 1);
		for (i=0;i<seqNum;i++) {
			mprintf (dbglevel, "\n> ", 1);
			for (j=0;j<aseqLen[k];j++) {
				sprintf(msg, "%c ", (*algnseq)[k][i][j]);
				mprintf (dbglevel, msg, 1);
			}
		}
	}
#endif
}

void PrintOptimalPath (long seqNum, char * * * algnseq, long aseqLen) {
#ifndef NDEBUG
	long i, j, k = 0;
	char msg[MID_MESSAGE_SIZE];
  
	sprintf(msg, "\n Aligned Sequences %ld: ", k+1);
	mprintf (1, msg, 1);
	for (i=0;i<seqNum;i++) {
		mprintf (1, "\n> ", 1);
		for (j=0;j<aseqLen;j++) {
			sprintf(msg, "%c ", (*algnseq)[i][j]);
			mprintf (1, msg, 1);
		}
	}
#endif
}

struct tm * getTime () {
  time_t ltime;
  struct tm *m_now;
  
  time( &ltime );
  
  /*printf( "UNIX time and date:\t\t\t%s", _ctime64( &ltime ) );*/
  
  /* Convert to time structure and adjust for PM if necessary. */
  m_now = localtime( &ltime );
  
  if( m_now->tm_hour == 0 )  /* Adjust if midnight hour. */
    m_now->tm_hour = 12;
  return m_now;
}

void cpTime (struct tm  * currNow, struct tm  * * prevNow) {
	(*prevNow)->tm_hour = currNow->tm_hour;
	(*prevNow)->tm_isdst = currNow->tm_isdst;
	(*prevNow)->tm_mday = currNow->tm_mday;
	(*prevNow)->tm_min = currNow->tm_min;
	(*prevNow)->tm_mon = currNow->tm_mon;
	(*prevNow)->tm_sec = currNow->tm_sec;
	(*prevNow)->tm_wday = currNow->tm_wday;
	(*prevNow)->tm_yday = currNow->tm_yday;
	(*prevNow)->tm_year = currNow->tm_year;
}

int isTimeDiffEquals (struct tm  * currNow, struct tm  * prevNow, char unit, int value) {
	int result = 0;
  switch (unit) {
    default:
      printf ("Invalid menu choice - try again\n");
    break;
      
    case 'm':
			if (((currNow->tm_yday * 1440) + (currNow->tm_hour * 60) + currNow->tm_min) > ((prevNow->tm_yday * 1440) + (prevNow->tm_hour * 60) + prevNow->tm_min + value)) {
				result = 1;
			}
    break;
	}
	return result;

}

int init_output() {
	char sfilename[SHORT_MESSAGE_SIZE];
   
  
	if (strlen(outputfilename) <= 0)
		strcpy(outputfilename,  outPrefix);
	sprintf(sfilename, "out/%s%sp%dt%d", outPrefix, outputfilename, myProcid, 1);
	if (( outfile1 = fopen (sfilename, "w")) == NULL) {
		printf("Proc [%d] Can not Initialize output file %s, exiting.\n", myProcid, sfilename);
		fflush(stdout);
		return -1;
	}
    
	sprintf(sfilename, "out/%s%sp%dt%d", outPrefix, outputfilename, myProcid, 2);
	if (( outfile2 = fopen (sfilename, "w")) == NULL) {
		printf("Proc [%d] Can not Initialize output file %s, exiting.\n", myProcid, sfilename);
		fflush(stdout);
		return -1;
	}
	sprintf(sfilename, "out/%s%sp%dt%d", outPrefix, outputfilename, myProcid, 3);
	if (( outfile3 = fopen (sfilename, "w")) == NULL) {
		printf("Proc [%d] Can not Initialize output file %s, exiting.\n", myProcid, sfilename);
		fflush(stdout);
		return -1;
	}
  
	return 0;
}

int close_output () {
	//if (close(outfile) == -1)
	if (fclose(outfile1) != 0) {
		printf ("ERROR Closing the debugging file!");   
		fflush(stdout);
		return -1;
    	}
	if (fclose(outfile2) != 0) {
		printf ("ERROR Closing the debugging file!");   
		fflush(stdout);
		return -1;
    	}
	if (fclose(outfile3) != 0) {
		printf ("ERROR Closing the debugging file!");   
		fflush(stdout);
		return -1;
    	}
  	return 0;
}

int isEven(long i) 
{
  return !(i%2);
}

int mprintf (int dbglevel, const char *msg, int thread_num) {
	int ret;

	if (dbglevel <= pdebug) {
		switch (thread_num) {
			case 1:
				ret = fprintf(outfile1, msg);
				break;
			case 2:
				ret = fprintf(outfile2, msg);
				break;
			case 3:
				ret = fprintf(outfile3, msg);
				break;
			default:
				ret = fprintf(outfile1, msg);
				break;
		}
		
		 if (ret < 0)
			printf ("[%d] Error writing to output file in thread %d\n", myProcid, thread_num);

		//ret = write (outfile1, msg, (int) sizeof(msg));      		
	}
	return ret;
}

size_t getSizes () {
  size_t size = 0;
  size = sizeof(long);
  size += sizeof(unsigned long);
  size += sizeof(unsigned long *);

  printf ("sizeof(MOA_elm) %d calculated as %d", (int) sizeof(MOA_elm),  (int) size);
  //(*MOA_val) = NULL;
  printf ("sizeof(long) %d \n", (int) sizeof(long));
  printf ("sizeof(unsigned long) %d \n", (int) sizeof(unsigned long));
  printf ("sizeof(unsigned long * ) %d \n", (int) sizeof(unsigned long * ));

  size = sizeof(long);
  size += sizeof(long *);
  size += sizeof(unsigned long);
  size += sizeof(unsigned long *);
  size += sizeof(MOA_elm *);

  printf ("sizeof(MOA_rec) %d calculated as %d", (int) sizeof(MOA_rec), (int) size);
  return size;
}

void * mmalloc(size_t size) {
  void * alloc_mem = NULL;
  char msg[MID_MESSAGE_SIZE];
  alloc_mem = malloc (size);
  if (alloc_mem == NULL ) {
    sprintf(msg, "mmalloc: Can not allocate memory  with size %d \n", (int) size);
    mprintf (0, msg, 1);
    return NULL;
  }
  return alloc_mem;
}

void * mcalloc(size_t num, size_t size) {
  void * alloc_mem = NULL;
  char msg[MID_MESSAGE_SIZE];
  
  alloc_mem = calloc (num, size);
  if (alloc_mem == NULL ) {
    sprintf(msg, "mcalloc: Can not allocate memory with num %d and size %d \n", (int) num, (int) size);
    mprintf (0, msg, 1);
    return NULL;
  }
  return alloc_mem;
}


/*
  reinventing the wheel? probably.. :)
  this code is in the public domain
  application of shell-swap algorithm avoids inefficiency of
  multiple strlen invocations. ;)
*/

char* strrev(char *pB)
{
  char *pE = pB;
  char *s = pB;

  /* avoid trouble */
  if(!pB || !*pB) return s;

  /* start looking for the null, then backtrack to last char */
  while (*++pE);
  pE--;

  /* repeat until begin/end pointers meet */
  while (pB < pE)
  {
    /* swap begin+n and end-n chars */
    char hold = *pB;
    /* gratuitous use of postfix increment with dereference */ 
    *pB++ = *pE;
    *pE-- = hold;
  }
  return s;
}



long mpow (long x, long y) {
  long powerV, i;
  powerV = 1;
  for (i=1;i<=y;i++) {
    powerV=powerV*x;
  }

  return powerV;
}
long  a_max(long * values, long ubound) {
  long maxVal, i;
  
  maxVal = values[0];
  for (i=1;i<ubound;i++) {
    if (maxVal < values[i])
      maxVal = values[i];
  }
  return maxVal;
}
long  a_min(long * values, long ubound) {
  long minVal, i;
  
  minVal = values[0];
  for (i=1;i<ubound;i++) {
    if (minVal > values[i])
      minVal = values[i];
  }
  return minVal;
}

long Factorial (long n) {
  if (n==0)
    return 1;
  else
    return (n * Factorial(n-1));
}

void l2Comb(long * n, long k, long * * * Combin)
{
  int i, j, row, column;
  
  row = 0;
  column = 0;
  for (i=0;i<k;i++){
    for (j=i+1;j<k;j++){
      (*Combin)[row][column] = n[i];
      column++;
      (*Combin)[row][column] = n[j];
      row++;
      column = 0;
    }
  }
}
/* max val in 3 values 
int max (int val1, int val2, int val3) {
  int maxVal = 0;
  if (val1  > maxVal)
    maxVal  = val1;
  if (val2  > maxVal)
    maxVal  = val2;
  if (val3  > maxVal)
    maxVal  = val3;
  
  return maxVal;
}
*/
/*max value from a linear array */
int maxVal (int * values, int valLen) {
  int i, maxVal = 0;
  for (i=0; i < valLen; i++)
    if (values[i] > maxVal)
      maxVal  = values[i];
  
  return maxVal;
}
/* Algorithm by Donald Knuth. */
/* C implementation by Glenn C. Rhoads */
void Combinations(long n, long k, long * * * Combin)
{
  long i, j=1, *c, x, row, column;
  c = mmalloc( (k+3) * sizeof *c);
  
  for (i=1; i <= k; i++) c[i] = i;
  c[k+1] = n+1;
  c[k+2] = 0;
  j = k;
  row = 0;
  column = 0;
  
 visit:
  for (i=k; i >= 1; i--) {
    (*Combin)[row][column] = c[i];
    column++;
  }
  column = 0;
  row++;
  
  if (j > 0) {x = j+1; goto incr;}
  
  if (c[1] + 1 < c[2])
    {
      c[1] += 1;
      goto visit;
    }
  
  j = 2;
  
 do_more:
  c[j-1] = j-1;
  x = c[j] + 1;
  if (x == c[j+1]) {j++; goto do_more;}
  
  if (j > k) {
    return;
  }
  
 incr:
  c[j] = x;
  j--;
  goto visit;
}

/*Function for actual copying of file, return 1 on success, 0 otherwise*/
int file_copy( char *oldname, char *newname, long bytes1, long bytes2)
     /*bytes1 denotes the start position in bytes, bytes2 denotes the end position*/
{
  FILE *fold, *fnew;
  int c;
  
  if ( ( fold = fopen( oldname, "rb" ) ) == NULL )
    return -1;
  
  if ( ( fnew = fopen( newname, "wb" ) ) == NULL  )
    {
      fclose ( fold );
      return -1;
    }
  
  /*Set file pointer to proper start location, as specified by user*/
  if ( ( fseek(fold, bytes1, SEEK_SET) != 0 ) )
    {
      fprintf(stderr, "\nError using fseek().");
      return -1;
    }
  
  while (1)
    {
      c=fgetc(fold);
      
      /*Continue copying until end of file or until the requested limit has been reached*/
      if ( !feof( fold ) && ftell(fold) <= bytes2)
	fputc( c, fnew );
      else
	break;
    }
  
  fclose ( fnew );
  fclose ( fold );
  
  return 1;
}


/*This function finds how many bytes need to copied, calculating it from the percentage inputted by the user*/
long get_bytes(float percent, char *source)
{
  long bytes;
  FILE *fold;
  
  if (percent<=100)
    {
      if ( ( fold = fopen( source, "rb" ) ) == NULL )
	{
	  //puts("Error opening source file");
	  return -1;
	}
      if ( (fseek(fold, 0, SEEK_END))!=0)
	{
	  fprintf(stderr, "\nError using fseek().");
	  return -1;
	}
      
      bytes=ftell(fold);
      bytes*=(percent/100);
    }
  else 
    {
      printf("Error in input\n");
      return -1;
    }
  
  fclose(fold);
  return bytes;
}
@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
    -x = Scheduling Method used, 1=Round Robin 2=Bag of Tasks.3= Dependency Based Scheduling
d67 1
a67 1
  */
d82 2
a83 1
	(*partitionSize) = 3;
d201 13
d220 6
a225 1
				SchedMethod = atoi(argv[++argRead]);
d230 5
a234 1
		}
@


1.1.1.1
log
@Distributed Optimal MSA using MoA
@
text
@@
