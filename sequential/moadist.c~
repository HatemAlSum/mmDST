#include <stdio.h>
#include<string.h>
#include <stdlib.h>
#include <ctype.h>      /* include the character library */
#include "moa.h"
#include "utils.h"
#include <mpi.h>
#include "lq.h"
#include "moamsa.h"

const char GABCHAR = '-';

void SlaveProcess () {
  MOA_rec * MOA_in;
  long i;
  /*receive my partition*/

  /*start computing the score*/
  /*wait for dependancy*/
  /*finish and notify scheduler of finishing to recive further jobs*/

  /* receive MOA structure*/
  createMOAStruct (&MOA_in);
  recivMOAIndices (MOA_in);
}
int recivMOAIndices (MOA_rec * MOA_in) {
    int             src;
    int             msgsize;
    MPI_Status      status;
    MPI_Request      request;
    char		*buffer;
   unsigned int	membersize, maxsize;
    int			dest, tag;
    int			position;
    long i, j, lmessage;

  /*1) dimn */
    MPI_Recv(&MOA_in->dimn, 1, MPI_LONG,
	    MPI_ANY_SOURCE , 1 , MPI_COMM_WORLD, &status);
  printf("\nI am [%d] received MOA_in->dimn = %d\n", myProcid, MOA_in->dimn);
  /*1) shape */
    MOA_in->shape = (long *) mcalloc(MOA_in->dimn, sizeof(long));
  for (i=0;i<MOA_in->dimn;i++) {
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 2, MPI_COMM_WORLD, &status);
    MOA_in->shape[i] = lmessage;
    printf("I am [%d] received MOA_in->shape[%d] = %d\n", myProcid, i, MOA_in->shape[i]);
  }
    /*3) elements_ub  */
    MPI_Recv(&MOA_in->elements_ub, 1, MPI_LONG,
	    MPI_ANY_SOURCE , 3 , MPI_COMM_WORLD, &status);

    printf("I am [%d] received elements_ub = %d\n", myProcid, MOA_in->elements_ub);
/*4) indexes */
    MOA_in->indexes = (signed long * ) mcalloc (MOA_in->elements_ub, sizeof(signed long));
  for (i=0;i<MOA_in->elements_ub;i++) {
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 4, MPI_COMM_WORLD, &status);
    MOA_in->indexes[i] = lmessage;
  }

}


void Diagonalize (MOA_rec * MOA_in) {

  long i, WaveSize;
  long * ind = NULL;
  ind = (long *) mmalloc ( MOA_in->dimn * sizeof(long));
  
  /*printMOA(MOA1);*/
  for (i = 0; i <  MOA_in->dimn; i++) {
    ind[i] = 1;
  }
  DistributeDiagonals (1, partitionSize, ind, MOA_in);
  free(ind);
}

void sendMOAIndices (int ProcDest, MOA_rec * MOA_in) {
   unsigned int	membersize, maxsize;
    int			position;
    int			dest, tag;
    char		*buffer;
    long i, j, PrevCellsCount, lmessage;
    MPI_Request request; 
/* Send the MOA Buffer*/
  /*1) dimn */
    MPI_Isend(&MOA_in->dimn, 1, MPI_LONG,
	    1, 1, MPI_COMM_WORLD, &request );
  /*1) shape */
  for (i=0;i<MOA_in->dimn;i++) {
    lmessage = MOA_in->shape[i];
    MPI_Isend(&MOA_in->shape[i], 1, MPI_LONG,
	    1, 2, MPI_COMM_WORLD, &request );
  }
    /*3) elements_ub  */
    MPI_Isend(&MOA_in->elements_ub, 1, MPI_LONG,
	    1, 3, MPI_COMM_WORLD, &request );
/*4) indexes */
  for (i=0;i<MOA_in->elements_ub;i++) {
    lmessage = MOA_in->indexes[i];
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 4, MPI_COMM_WORLD, &request );
  }

}


void sendMOA (int ProcDest, MOA_rec * MOA_in) {
   unsigned int	membersize, maxsize;
    int			position;
    int			dest, tag;
    char		*buffer;
    long i, j, PrevCellsCount, lmessage;
    MPI_Request request; 
/* Send the MOA Buffer*/
  /*1) dimn */
    MPI_Isend(&MOA_in->dimn, 1, MPI_LONG,
	    1, 1, MPI_COMM_WORLD, &request );
  /*1) shape */
  for (i=0;i<MOA_in->dimn;i++) {
    lmessage = MOA_in->shape[i];
    MPI_Isend(&MOA_in->shape[i], 1, MPI_LONG,
	    1, 2, MPI_COMM_WORLD, &request );
  }
    /*3) elements_ub  */
    MPI_Isend(&MOA_in->elements_ub, 1, MPI_LONG,
	    1, 3, MPI_COMM_WORLD, &request );
/*4) indexes */
  for (i=0;i<MOA_in->elements_ub;i++) {
    lmessage = MOA_in->indexes[i];
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 4, MPI_COMM_WORLD, &request );
  }
/*5) elements */
  for (i=0;i<MOA_in->elements_ub;i++) {
/*5.1) values*/
    lmessage = MOA_in->elements[i].val;
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 5, MPI_COMM_WORLD, &request );

/*5.2) flags*/
    lmessage = MOA_in->elements[i].flag;
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 6, MPI_COMM_WORLD, &request );
/*5.3) Processors*/
    lmessage = MOA_in->elements[i].proc;
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 7, MPI_COMM_WORLD, &request );
/*5.4) Dependant Processors*/
    lmessage = MOA_in->elements[i].dproc;
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 8, MPI_COMM_WORLD, &request );
/*5.5) Parent Cells Count*/
    lmessage = MOA_in->elements[i].prev_ub;
    MPI_Isend(&lmessage, 1, MPI_LONG,
	    1, 9, MPI_COMM_WORLD, &request );
/*5.6) Parent Cells Indices */
    if (MOA_in->elements[i].prev_ub > 0 ) {
      for (j=0;j<MOA_in->elements[i].prev_ub;j++) {
	lmessage = MOA_in->elements[i].prev[j];
	MPI_Isend(&lmessage, 1, MPI_LONG,
		  1, 10, MPI_COMM_WORLD, &request );
      }
    }
  }
}

int recivMOA (MOA_rec * MOA_in) {
    int             src;
    int             msgsize;
    MPI_Status      status;
    MPI_Request      request;
    char		*buffer;
   unsigned int	membersize, maxsize;
    int			dest, tag;
    int			position;
    long i, j, lmessage;

  /*1) dimn */
    MPI_Recv(&MOA_in->dimn, 1, MPI_LONG,
	    MPI_ANY_SOURCE , 1 , MPI_COMM_WORLD, &status);
  printf("\nI am [%d] received MOA_in->dimn = %d\n", myProcid, MOA_in->dimn);
  /*1) shape */
    MOA_in->shape = (long *) mcalloc(MOA_in->dimn, sizeof(long));
  for (i=0;i<MOA_in->dimn;i++) {
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 2, MPI_COMM_WORLD, &status);
    MOA_in->shape[i] = lmessage;
    printf("I am [%d] received MOA_in->shape[%d] = %d\n", myProcid, i, MOA_in->shape[i]);
  }
    /*3) elements_ub  */
    MPI_Recv(&MOA_in->elements_ub, 1, MPI_LONG,
	    MPI_ANY_SOURCE , 3 , MPI_COMM_WORLD, &status);

    printf("I am [%d] received elements_ub = %d\n", myProcid, MOA_in->elements_ub);
/*4) indexes */
    MOA_in->indexes = (signed long * ) mcalloc (MOA_in->elements_ub, sizeof(signed long));
  for (i=0;i<MOA_in->elements_ub;i++) {
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 4, MPI_COMM_WORLD, &status);
    MOA_in->indexes[i] = lmessage;
  }
/*5) elements */
    MOA_in->elements = (MOA_elm * ) mcalloc (MOA_in->elements_ub, sizeof(MOA_elm));
  for (i=0;i<MOA_in->elements_ub;i++) {
/*5.1) values*/
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 5, MPI_COMM_WORLD, &status);
    MOA_in->elements[i].val = lmessage;
    printf("I am [%d] received MOA_in->elements[%d].val = %d\n", myProcid, i, MOA_in->elements[i].val);

/*5.2) flags*/
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 6, MPI_COMM_WORLD, &status);
    MOA_in->elements[i].flag = lmessage;
    /*5.3) Processors */
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 7, MPI_COMM_WORLD, &status);
    MOA_in->elements[i].proc = lmessage;
    /*5.4) Dependant Processors */
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 8, MPI_COMM_WORLD, &status);
    MOA_in->elements[i].dproc = lmessage;
    /*5.5) Parent Cells Count */
    MPI_Recv(&lmessage, 1, MPI_LONG,
	    MPI_ANY_SOURCE, 9, MPI_COMM_WORLD, &status);
    MOA_in->elements[i].prev_ub = lmessage;
    if (MOA_in->elements[i].prev_ub > 0 ) {
      /*5.6) Parent Cells Indices */
      MOA_in->elements[i].prev = (unsigned long * ) mcalloc (MOA_in->elements[i].prev_ub, sizeof(unsigned long));
      for (j=0;j<MOA_in->elements[i].prev_ub;j++) {
	MPI_Recv(&lmessage, 1, MPI_LONG,
		 MPI_ANY_SOURCE, 10, MPI_COMM_WORLD, &status);
	MOA_in->elements[i].prev[j] = lmessage;
      }
    }
    else
      MOA_in->elements[i].prev = NULL;
  }
}


void MasterProcess (int argc, char ** argv) {
  long seqNum, i, k  = 0;
 
  char * * sequences = NULL;
  long * seqLen = NULL;
  char * * * algnseq = NULL;
  long * aSeqLen = NULL;
  int alignmentsNo=0;
  MOA_rec * msaAlgn = NULL;
 
  int stype = 0;
  long currentScore, currentCell = 0;
  long prevScore, prevCell = 0;

  long flatIndex;
  long rslt_ub, strides; 
  int finished = 1;
  long * rslt = NULL;
  long * rsltInd = NULL;

  processArguments(argc, argv, &seqNum, &sequences, &seqLen, &stype);
  createMOAStruct (&msaAlgn);
  
  createMOA(seqLen /* shape*/, seqNum /* dimension*/, msaAlgn /* MOA structure*/,-1,0);
  Diagonalize (msaAlgn);
  /* Send MOA structure*/
  //sendMOAIndices (1, msaAlgn);
  deleteMOA (msaAlgn);  
}
void   Distribute (int argc, char ** argv) {

  int msgsrc, i;/*Message Sender, and counters*/
  int msgval_r;/*Single Message value to be exchanged*/
  MPI_Status status; /*Message receive strcucture*/
  MPI_Request request;/*Non-blocking send or receive status*/
  int tag = 1;/*Message Exchange tag*/
  
  /*  
  for (i=0;i<ClsuterSize;i++) {
    MPI_Isend (&myProcid, 1, MPI_INT, i, tag, MPI_COMM_WORLD, &request);
    printf("Iam %d sent my id to %d\n", myProcid, i);
  }
  for (i=0;i<ClsuterSize;i++) {
    MPI_Recv (&msgval_r, 1, MPI_INT, MPI_ANY_SOURCE, tag,MPI_COMM_WORLD, &status);
    msgsrc = status.MPI_SOURCE;   
    printf("Iam %d received %d from %d\n", myProcid, msgval_r, msgsrc);
  }
  */

 
  if (myProcid == 0) {
    for (i=0;i<ClsuterSize;i++) {
      if (myProcid != i) {
	enqueue(&processors, i);
      }
    }
    printf("\n [%d] Calling Master Process", myProcid);
    MasterProcess(argc, argv);
    //displayq(processors);
    //main_old ();
  }
  else if (myProcid == 1) {
    printf("\n [%d] Calling Slave Process", myProcid);
    SlaveProcess ();
  }
}

int main (int argc, char ** argv) {
  long seqNum, i, k  = 0;
 
  char * * sequences = NULL;
  long * seqLen = NULL;
  char * * * algnseq = NULL;
  long * aSeqLen = NULL;
  int alignmentsNo=0;
  MOA_rec * msaAlgn = NULL;
 
  int stype = 0;
  long currentScore, currentCell = 0;
  long prevScore, prevCell = 0;

  /* initialize MPI and get own id (rank) */
  MPI_Init (&argc, &argv);
  MPI_Comm_rank (MPI_COMM_WORLD, &myProcid);
  MPI_Comm_size (MPI_COMM_WORLD, &ClsuterSize);

  Distribute (argc, argv);
  
  MPI_Finalize ();
  return EXIT_SUCCESS;

}
